ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 2


  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 4


  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 5


 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 173 0
  97 000e 584B     		ldr	r3, .L17
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 564B     		ldr	r3, .L17+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 6


 106 001e 564B     		ldr	r3, .L17+8
 107 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 5549     		ldr	r1, .L17+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 5549     		ldr	r1, .L17+16
 117              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 554B     		ldr	r3, .L17+20
 120 002e 554A     		ldr	r2, .L17+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 544B     		ldr	r3, .L17+24
 126 0038 544A     		ldr	r2, .L17+28
 127 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 544B     		ldr	r3, .L17+32
 130 003e 554A     		ldr	r2, .L17+36
 131 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 554B     		ldr	r3, .L17+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 185 0 discriminator 4
 137 0048 544B     		ldr	r3, .L17+44
 138 004a 554A     		ldr	r2, .L17+48
 139 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 186 0 discriminator 4
 141 004e 554B     		ldr	r3, .L17+52
 142 0050 534A     		ldr	r2, .L17+48
 143 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 190 0 discriminator 4
 145 0054 544B     		ldr	r3, .L17+56
 146 0056 544A     		ldr	r2, .L17+56
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 7


 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 152              		.loc 1 197 0 discriminator 4
 153 0062 524B     		ldr	r3, .L17+60
 154 0064 0022     		mov	r2, #0
 155 0066 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 156              		.loc 1 198 0 discriminator 4
 157 0068 514B     		ldr	r3, .L17+64
 158 006a 0022     		mov	r2, #0
 159 006c 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 160              		.loc 1 199 0 discriminator 4
 161 006e 514B     		ldr	r3, .L17+68
 162 0070 0122     		mov	r2, #1
 163 0072 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 164              		.loc 1 206 0 discriminator 4
 165 0074 504B     		ldr	r3, .L17+72
 166 0076 1B68     		ldr	r3, [r3]
 167 0078 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 168              		.loc 1 207 0 discriminator 4
 169 007a 7B68     		ldr	r3, [r7, #4]
 170 007c 4F4A     		ldr	r2, .L17+76
 171 007e 1340     		and	r3, r2
 172 0080 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 173              		.loc 1 220 0 discriminator 4
 174 0082 7B68     		ldr	r3, [r7, #4]
 175 0084 8022     		mov	r2, #128
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 8


 176 0086 9205     		lsl	r2, r2, #22
 177 0088 1343     		orr	r3, r2
 178 008a 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 179              		.loc 1 221 0 discriminator 4
 180 008c 7B68     		ldr	r3, [r7, #4]
 181 008e 0122     		mov	r2, #1
 182 0090 9343     		bic	r3, r2
 183 0092 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 184              		.loc 1 226 0 discriminator 4
 185 0094 484B     		ldr	r3, .L17+72
 186 0096 7A68     		ldr	r2, [r7, #4]
 187 0098 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 188              		.loc 1 232 0 discriminator 4
 189 009a 0023     		mov	r3, #0
 190 009c FB60     		str	r3, [r7, #12]
 191 009e 61E0     		b	.L8
 192              	.L16:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 193              		.loc 1 234 0
 194 00a0 8023     		mov	r3, #128
 195 00a2 DA00     		lsl	r2, r3, #3
 196 00a4 DC23     		mov	r3, #220
 197 00a6 9B01     		lsl	r3, r3, #6
 198 00a8 1340     		and	r3, r2
 199 00aa 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 9


 200              		.loc 1 253 0
 201 00ac FB68     		ldr	r3, [r7, #12]
 202 00ae 9B00     		lsl	r3, r3, #2
 203 00b0 434A     		ldr	r2, .L17+80
 204 00b2 9446     		mov	ip, r2
 205 00b4 6344     		add	r3, r3, ip
 206 00b6 7A68     		ldr	r2, [r7, #4]
 207 00b8 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 208              		.loc 1 255 0
 209 00ba 8023     		mov	r3, #128
 210 00bc DB00     		lsl	r3, r3, #3
 211 00be 0122     		mov	r2, #1
 212 00c0 1340     		and	r3, r2
 213 00c2 09D0     		beq	.L9
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 214              		.loc 1 257 0
 215 00c4 394B     		ldr	r3, .L17+60
 216 00c6 394A     		ldr	r2, .L17+60
 217 00c8 1268     		ldr	r2, [r2]
 218 00ca F968     		ldr	r1, [r7, #12]
 219 00cc 0120     		mov	r0, #1
 220 00ce 8840     		lsl	r0, r0, r1
 221 00d0 011C     		mov	r1, r0
 222 00d2 89B2     		uxth	r1, r1
 223 00d4 0A43     		orr	r2, r1
 224 00d6 1A60     		str	r2, [r3]
 225              	.L9:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 226              		.loc 1 260 0
 227 00d8 8023     		mov	r3, #128
 228 00da DB00     		lsl	r3, r3, #3
 229 00dc 0222     		mov	r2, #2
 230 00de 1340     		and	r3, r2
 231 00e0 09D0     		beq	.L10
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 232              		.loc 1 262 0
 233 00e2 334B     		ldr	r3, .L17+64
 234 00e4 324A     		ldr	r2, .L17+64
 235 00e6 1268     		ldr	r2, [r2]
 236 00e8 F968     		ldr	r1, [r7, #12]
 237 00ea 0120     		mov	r0, #1
 238 00ec 8840     		lsl	r0, r0, r1
 239 00ee 011C     		mov	r1, r0
 240 00f0 89B2     		uxth	r1, r1
 241 00f2 0A43     		orr	r2, r1
 242 00f4 1A60     		str	r2, [r3]
 243              	.L10:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 10


 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 244              		.loc 1 282 0
 245 00f6 8023     		mov	r3, #128
 246 00f8 DA00     		lsl	r2, r3, #3
 247 00fa 8023     		mov	r3, #128
 248 00fc 9B00     		lsl	r3, r3, #2
 249 00fe 1340     		and	r3, r2
 250 0100 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 251              		.loc 1 284 0
 252 0102 8023     		mov	r3, #128
 253 0104 5B00     		lsl	r3, r3, #1
 254 0106 BB60     		str	r3, [r7, #8]
 255 0108 02E0     		b	.L12
 256              	.L11:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 257              		.loc 1 288 0
 258 010a 8023     		mov	r3, #128
 259 010c 5B01     		lsl	r3, r3, #5
 260 010e BB60     		str	r3, [r7, #8]
 261              	.L12:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 262              		.loc 1 291 0
 263 0110 8023     		mov	r3, #128
 264 0112 DA00     		lsl	r2, r3, #3
 265 0114 8023     		mov	r3, #128
 266 0116 5B00     		lsl	r3, r3, #1
 267 0118 1340     		and	r3, r2
 268 011a 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 11


 269              		.loc 1 298 0
 270 011c 294B     		ldr	r3, .L17+84
 271 011e FA68     		ldr	r2, [r7, #12]
 272 0120 5200     		lsl	r2, r2, #1
 273 0122 0021     		mov	r1, #0
 274 0124 D152     		strh	r1, [r2, r3]
 275 0126 09E0     		b	.L14
 276              	.L13:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 277              		.loc 1 305 0
 278 0128 BB68     		ldr	r3, [r7, #8]
 279 012a 002B     		cmp	r3, #0
 280 012c 00DA     		bge	.L15
 281 012e 0133     		add	r3, r3, #1
 282              	.L15:
 283 0130 5B10     		asr	r3, r3, #1
 284 0132 99B2     		uxth	r1, r3
 285 0134 234B     		ldr	r3, .L17+84
 286 0136 FA68     		ldr	r2, [r7, #12]
 287 0138 5200     		lsl	r2, r2, #1
 288 013a D152     		strh	r1, [r2, r3]
 289              	.L14:
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 290              		.loc 1 311 0 discriminator 2
 291 013c BB68     		ldr	r3, [r7, #8]
 292 013e 224A     		ldr	r2, .L17+88
 293 0140 5343     		mul	r3, r2
 294 0142 224A     		ldr	r2, .L17+92
 295 0144 9446     		mov	ip, r2
 296 0146 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 297              		.loc 1 312 0 discriminator 2
 298 0148 181C     		mov	r0, r3
 299 014a 2149     		ldr	r1, .L17+96
 300 014c FFF7FEFF 		bl	__aeabi_idiv
 301 0150 031C     		mov	r3, r0
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 302              		.loc 1 311 0 discriminator 2
 303 0152 9BB2     		uxth	r3, r3
 304 0154 19B2     		sxth	r1, r3
 305 0156 1F4B     		ldr	r3, .L17+100
 306 0158 FA68     		ldr	r2, [r7, #12]
 307 015a 9200     		lsl	r2, r2, #2
 308 015c D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 309              		.loc 1 232 0 discriminator 2
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 12


 310 015e FB68     		ldr	r3, [r7, #12]
 311 0160 0133     		add	r3, r3, #1
 312 0162 FB60     		str	r3, [r7, #12]
 313              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 314              		.loc 1 232 0 is_stmt 0 discriminator 1
 315 0164 FB68     		ldr	r3, [r7, #12]
 316 0166 002B     		cmp	r3, #0
 317 0168 9AD0     		beq	.L16
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 318              		.loc 1 314 0 is_stmt 1
 319 016a BD46     		mov	sp, r7
 320 016c 04B0     		add	sp, sp, #16
 321              		@ sp needed
 322 016e 80BD     		pop	{r7, pc}
 323              	.L18:
 324              		.align	2
 325              	.L17:
 326 0170 00000000 		.word	ADC_ISR
 327 0174 20003A40 		.word	1077542944
 328 0178 80033A40 		.word	1077543808
 329 017c 70021053 		.word	1393558128
 330 0180 70020053 		.word	1392509552
 331 0184 00003A40 		.word	1077542912
 332 0188 04003A40 		.word	1077542916
 333 018c C4000A80 		.word	-2146828092
 334 0190 18003A40 		.word	1077542936
 335 0194 0000FF07 		.word	134152192
 336 0198 1C003A40 		.word	1077542940
 337 019c 10003A40 		.word	1077542928
 338 01a0 04000400 		.word	262148
 339 01a4 14003A40 		.word	1077542932
 340 01a8 00033A40 		.word	1077543680
 341 01ac 28023A40 		.word	1077543464
 342 01b0 38023A40 		.word	1077543480
 343 01b4 18023A40 		.word	1077543448
 344 01b8 30003A40 		.word	1077542960
 345 01bc FFFFFFDF 		.word	-536870913
 346 01c0 80003A40 		.word	1077543040
 347 01c4 00000000 		.word	ADC_offset
 348 01c8 10270000 		.word	10000
 349 01cc E40C0000 		.word	3300
 350 01d0 C8190000 		.word	6600
 351 01d4 00000000 		.word	ADC_countsPer10Volt
 352              		.cfi_endproc
 353              	.LFE3:
 354              		.size	ADC_Init, .-ADC_Init
 355              		.section	.text.ADC_Enable,"ax",%progbits
 356              		.align	2
 357              		.global	ADC_Enable
 358              		.code	16
 359              		.thumb_func
 360              		.type	ADC_Enable, %function
 361              	ADC_Enable:
 362              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 13


 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 363              		.loc 1 331 0
 364              		.cfi_startproc
 365 0000 80B5     		push	{r7, lr}
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 371              		.loc 1 332 0
 372 0004 0A4B     		ldr	r3, .L22
 373 0006 1B68     		ldr	r3, [r3]
 374 0008 002B     		cmp	r3, #0
 375 000a 0EDB     		blt	.L19
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 376              		.loc 1 336 0
 377 000c C046     		mov	r8, r8
 378              	.L21:
 379              		.loc 1 336 0 is_stmt 0 discriminator 1
 380 000e 094B     		ldr	r3, .L22+4
 381 0010 1B68     		ldr	r3, [r3]
 382 0012 002B     		cmp	r3, #0
 383 0014 FBDB     		blt	.L21
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 384              		.loc 1 342 0 is_stmt 1
 385 0016 064B     		ldr	r3, .L22
 386 0018 054A     		ldr	r2, .L22
 387 001a 1268     		ldr	r2, [r2]
 388 001c 8021     		mov	r1, #128
 389 001e 0906     		lsl	r1, r1, #24
 390 0020 0A43     		orr	r2, r1
 391 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 14


 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 392              		.loc 1 345 0
 393 0024 0A20     		mov	r0, #10
 394 0026 FFF7FEFF 		bl	CyDelayUs
 395              	.L19:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 396              		.loc 1 347 0
 397 002a BD46     		mov	sp, r7
 398              		@ sp needed
 399 002c 80BD     		pop	{r7, pc}
 400              	.L23:
 401 002e C046     		.align	2
 402              	.L22:
 403 0030 00003A40 		.word	1077542912
 404 0034 08023A40 		.word	1077543432
 405              		.cfi_endproc
 406              	.LFE4:
 407              		.size	ADC_Enable, .-ADC_Enable
 408              		.section	.text.ADC_Stop,"ax",%progbits
 409              		.align	2
 410              		.global	ADC_Stop
 411              		.code	16
 412              		.thumb_func
 413              		.type	ADC_Stop, %function
 414              	ADC_Stop:
 415              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 416              		.loc 1 366 0
 417              		.cfi_startproc
 418 0000 80B5     		push	{r7, lr}
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 00AF     		add	r7, sp, #0
 423              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 424              		.loc 1 367 0
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 15


 425 0004 034B     		ldr	r3, .L25
 426 0006 034A     		ldr	r2, .L25
 427 0008 1268     		ldr	r2, [r2]
 428 000a 5200     		lsl	r2, r2, #1
 429 000c 5208     		lsr	r2, r2, #1
 430 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 431              		.loc 1 368 0
 432 0010 BD46     		mov	sp, r7
 433              		@ sp needed
 434 0012 80BD     		pop	{r7, pc}
 435              	.L26:
 436              		.align	2
 437              	.L25:
 438 0014 00003A40 		.word	1077542912
 439              		.cfi_endproc
 440              	.LFE5:
 441              		.size	ADC_Stop, .-ADC_Stop
 442              		.section	.text.ADC_StartConvert,"ax",%progbits
 443              		.align	2
 444              		.global	ADC_StartConvert
 445              		.code	16
 446              		.thumb_func
 447              		.type	ADC_StartConvert, %function
 448              	ADC_StartConvert:
 449              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 450              		.loc 1 392 0
 451              		.cfi_startproc
 452 0000 80B5     		push	{r7, lr}
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 16


 457              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 458              		.loc 1 396 0
 459 0004 024B     		ldr	r3, .L28
 460 0006 0122     		mov	r2, #1
 461 0008 1A60     		str	r2, [r3]
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 462              		.loc 1 399 0
 463 000a BD46     		mov	sp, r7
 464              		@ sp needed
 465 000c 80BD     		pop	{r7, pc}
 466              	.L29:
 467 000e C046     		.align	2
 468              	.L28:
 469 0010 24003A40 		.word	1077542948
 470              		.cfi_endproc
 471              	.LFE6:
 472              		.size	ADC_StartConvert, .-ADC_StartConvert
 473              		.section	.text.ADC_StopConvert,"ax",%progbits
 474              		.align	2
 475              		.global	ADC_StopConvert
 476              		.code	16
 477              		.thumb_func
 478              		.type	ADC_StopConvert, %function
 479              	ADC_StopConvert:
 480              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 481              		.loc 1 417 0
 482              		.cfi_startproc
 483 0000 80B5     		push	{r7, lr}
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 00AF     		add	r7, sp, #0
 488              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 17


 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 489              		.loc 1 421 0
 490 0004 BD46     		mov	sp, r7
 491              		@ sp needed
 492 0006 80BD     		pop	{r7, pc}
 493              		.cfi_endproc
 494              	.LFE7:
 495              		.size	ADC_StopConvert, .-ADC_StopConvert
 496              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 497              		.align	2
 498              		.global	ADC_IsEndConversion
 499              		.code	16
 500              		.thumb_func
 501              		.type	ADC_IsEndConversion, %function
 502              	ADC_IsEndConversion:
 503              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 504              		.loc 1 451 0
 505              		.cfi_startproc
 506 0000 80B5     		push	{r7, lr}
 507              		.cfi_def_cfa_offset 8
 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0002 84B0     		sub	sp, sp, #16
 511              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 18


 512 0004 00AF     		add	r7, sp, #0
 513              		.cfi_def_cfa_register 7
 514 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 515              		.loc 1 452 0
 516 0008 0023     		mov	r3, #0
 517 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 518              		.loc 1 454 0
 519 000c 7B68     		ldr	r3, [r7, #4]
 520 000e 0322     		mov	r2, #3
 521 0010 1340     		and	r3, r2
 522 0012 11D0     		beq	.L32
 523              	.L34:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 524              		.loc 1 458 0 discriminator 2
 525 0014 0B4B     		ldr	r3, .L36
 526 0016 1B68     		ldr	r3, [r3]
 527 0018 0122     		mov	r2, #1
 528 001a 1340     		and	r3, r2
 529 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 530              		.loc 1 459 0 discriminator 2
 531 001e FB68     		ldr	r3, [r7, #12]
 532 0020 002B     		cmp	r3, #0
 533 0022 03D1     		bne	.L33
 534              		.loc 1 459 0 is_stmt 0 discriminator 1
 535 0024 7B68     		ldr	r3, [r7, #4]
 536 0026 0222     		mov	r2, #2
 537 0028 1340     		and	r3, r2
 538 002a F3D1     		bne	.L34
 539              	.L33:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 540              		.loc 1 461 0 is_stmt 1
 541 002c FB68     		ldr	r3, [r7, #12]
 542 002e 002B     		cmp	r3, #0
 543 0030 02D0     		beq	.L32
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 544              		.loc 1 464 0
 545 0032 044B     		ldr	r3, .L36
 546 0034 0122     		mov	r2, #1
 547 0036 1A60     		str	r2, [r3]
 548              	.L32:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 19


 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 549              		.loc 1 485 0
 550 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 551              		.loc 1 486 0
 552 003a 181C     		mov	r0, r3
 553 003c BD46     		mov	sp, r7
 554 003e 04B0     		add	sp, sp, #16
 555              		@ sp needed
 556 0040 80BD     		pop	{r7, pc}
 557              	.L37:
 558 0042 C046     		.align	2
 559              	.L36:
 560 0044 10023A40 		.word	1077543440
 561              		.cfi_endproc
 562              	.LFE8:
 563              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 564              		.section	.text.ADC_GetResult16,"ax",%progbits
 565              		.align	2
 566              		.global	ADC_GetResult16
 567              		.code	16
 568              		.thumb_func
 569              		.type	ADC_GetResult16, %function
 570              	ADC_GetResult16:
 571              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 20


 572              		.loc 1 505 0
 573              		.cfi_startproc
 574 0000 80B5     		push	{r7, lr}
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 84B0     		sub	sp, sp, #16
 579              		.cfi_def_cfa_offset 24
 580 0004 00AF     		add	r7, sp, #0
 581              		.cfi_def_cfa_register 7
 582 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 583              		.loc 1 509 0
 584 0008 7B68     		ldr	r3, [r7, #4]
 585 000a 002B     		cmp	r3, #0
 586 000c 02D0     		beq	.L39
 587              		.loc 1 509 0 is_stmt 0 discriminator 1
 588 000e 0020     		mov	r0, #0
 589 0010 FFF7FEFF 		bl	CyHalt
 590              	.L39:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 591              		.loc 1 511 0 is_stmt 1
 592 0014 7B68     		ldr	r3, [r7, #4]
 593 0016 002B     		cmp	r3, #0
 594 0018 09D1     		bne	.L40
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 595              		.loc 1 513 0
 596 001a 7B68     		ldr	r3, [r7, #4]
 597 001c 9B00     		lsl	r3, r3, #2
 598 001e 084A     		ldr	r2, .L43
 599 0020 9446     		mov	ip, r2
 600 0022 6344     		add	r3, r3, ip
 601 0024 1B68     		ldr	r3, [r3]
 602 0026 1B04     		lsl	r3, r3, #16
 603 0028 1B0C     		lsr	r3, r3, #16
 604 002a FB60     		str	r3, [r7, #12]
 605 002c 01E0     		b	.L41
 606              	.L40:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 607              		.loc 1 521 0
 608 002e 0023     		mov	r3, #0
 609 0030 FB60     		str	r3, [r7, #12]
 610              	.L41:
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 21


 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 611              		.loc 1 525 0
 612 0032 FB68     		ldr	r3, [r7, #12]
 613 0034 9BB2     		uxth	r3, r3
 614 0036 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 615              		.loc 1 526 0
 616 0038 181C     		mov	r0, r3
 617 003a BD46     		mov	sp, r7
 618 003c 04B0     		add	sp, sp, #16
 619              		@ sp needed
 620 003e 80BD     		pop	{r7, pc}
 621              	.L44:
 622              		.align	2
 623              	.L43:
 624 0040 80013A40 		.word	1077543296
 625              		.cfi_endproc
 626              	.LFE9:
 627              		.size	ADC_GetResult16, .-ADC_GetResult16
 628              		.section	.text.ADC_SetChanMask,"ax",%progbits
 629              		.align	2
 630              		.global	ADC_SetChanMask
 631              		.code	16
 632              		.thumb_func
 633              		.type	ADC_SetChanMask, %function
 634              	ADC_SetChanMask:
 635              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 636              		.loc 1 550 0
 637              		.cfi_startproc
 638 0000 80B5     		push	{r7, lr}
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 7, -8
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 22


 641              		.cfi_offset 14, -4
 642 0002 82B0     		sub	sp, sp, #8
 643              		.cfi_def_cfa_offset 16
 644 0004 00AF     		add	r7, sp, #0
 645              		.cfi_def_cfa_register 7
 646 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 647              		.loc 1 551 0
 648 0008 034B     		ldr	r3, .L46
 649 000a 7A68     		ldr	r2, [r7, #4]
 650 000c 0121     		mov	r1, #1
 651 000e 0A40     		and	r2, r1
 652 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
 653              		.loc 1 552 0
 654 0012 BD46     		mov	sp, r7
 655 0014 02B0     		add	sp, sp, #8
 656              		@ sp needed
 657 0016 80BD     		pop	{r7, pc}
 658              	.L47:
 659              		.align	2
 660              	.L46:
 661 0018 20003A40 		.word	1077542944
 662              		.cfi_endproc
 663              	.LFE10:
 664              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 665              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 666              		.align	2
 667              		.global	ADC_SetLowLimit
 668              		.code	16
 669              		.thumb_func
 670              		.type	ADC_SetLowLimit, %function
 671              	ADC_SetLowLimit:
 672              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 23


 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 673              		.loc 1 594 0
 674              		.cfi_startproc
 675 0000 80B5     		push	{r7, lr}
 676              		.cfi_def_cfa_offset 8
 677              		.cfi_offset 7, -8
 678              		.cfi_offset 14, -4
 679 0002 82B0     		sub	sp, sp, #8
 680              		.cfi_def_cfa_offset 16
 681 0004 00AF     		add	r7, sp, #0
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 684              		.loc 1 595 0
 685 0008 084B     		ldr	r3, .L49
 686 000a 084A     		ldr	r2, .L49
 687 000c 1268     		ldr	r2, [r2]
 688 000e 120C     		lsr	r2, r2, #16
 689 0010 1204     		lsl	r2, r2, #16
 690 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 691              		.loc 1 596 0
 692 0014 054B     		ldr	r3, .L49
 693 0016 054A     		ldr	r2, .L49
 694 0018 1168     		ldr	r1, [r2]
 695 001a 7A68     		ldr	r2, [r7, #4]
 696 001c 1204     		lsl	r2, r2, #16
 697 001e 120C     		lsr	r2, r2, #16
 698 0020 0A43     		orr	r2, r1
 699 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 700              		.loc 1 597 0
 701 0024 BD46     		mov	sp, r7
 702 0026 02B0     		add	sp, sp, #8
 703              		@ sp needed
 704 0028 80BD     		pop	{r7, pc}
 705              	.L50:
 706 002a C046     		.align	2
 707              	.L49:
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 24


 708 002c 18003A40 		.word	1077542936
 709              		.cfi_endproc
 710              	.LFE11:
 711              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 712              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 713              		.align	2
 714              		.global	ADC_SetHighLimit
 715              		.code	16
 716              		.thumb_func
 717              		.type	ADC_SetHighLimit, %function
 718              	ADC_SetHighLimit:
 719              	.LFB12:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 720              		.loc 1 615 0
 721              		.cfi_startproc
 722 0000 80B5     		push	{r7, lr}
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 82B0     		sub	sp, sp, #8
 727              		.cfi_def_cfa_offset 16
 728 0004 00AF     		add	r7, sp, #0
 729              		.cfi_def_cfa_register 7
 730 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 731              		.loc 1 616 0
 732 0008 074B     		ldr	r3, .L52
 733 000a 074A     		ldr	r2, .L52
 734 000c 1268     		ldr	r2, [r2]
 735 000e 1204     		lsl	r2, r2, #16
 736 0010 120C     		lsr	r2, r2, #16
 737 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 738              		.loc 1 617 0
 739 0014 044B     		ldr	r3, .L52
 740 0016 044A     		ldr	r2, .L52
 741 0018 1168     		ldr	r1, [r2]
 742 001a 7A68     		ldr	r2, [r7, #4]
 743 001c 1204     		lsl	r2, r2, #16
 744 001e 0A43     		orr	r2, r1
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 25


 745 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 746              		.loc 1 618 0
 747 0022 BD46     		mov	sp, r7
 748 0024 02B0     		add	sp, sp, #8
 749              		@ sp needed
 750 0026 80BD     		pop	{r7, pc}
 751              	.L53:
 752              		.align	2
 753              	.L52:
 754 0028 18003A40 		.word	1077542936
 755              		.cfi_endproc
 756              	.LFE12:
 757              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 758              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 759              		.align	2
 760              		.global	ADC_SetLimitMask
 761              		.code	16
 762              		.thumb_func
 763              		.type	ADC_SetLimitMask, %function
 764              	ADC_SetLimitMask:
 765              	.LFB13:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 766              		.loc 1 639 0
 767              		.cfi_startproc
 768 0000 80B5     		push	{r7, lr}
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 7, -8
 771              		.cfi_offset 14, -4
 772 0002 82B0     		sub	sp, sp, #8
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 777              		.loc 1 640 0
 778 0008 034B     		ldr	r3, .L55
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 26


 779 000a 7A68     		ldr	r2, [r7, #4]
 780 000c 0121     		mov	r1, #1
 781 000e 0A40     		and	r2, r1
 782 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 783              		.loc 1 641 0
 784 0012 BD46     		mov	sp, r7
 785 0014 02B0     		add	sp, sp, #8
 786              		@ sp needed
 787 0016 80BD     		pop	{r7, pc}
 788              	.L56:
 789              		.align	2
 790              	.L55:
 791 0018 38023A40 		.word	1077543480
 792              		.cfi_endproc
 793              	.LFE13:
 794              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 795              		.section	.text.ADC_SetSatMask,"ax",%progbits
 796              		.align	2
 797              		.global	ADC_SetSatMask
 798              		.code	16
 799              		.thumb_func
 800              		.type	ADC_SetSatMask, %function
 801              	ADC_SetSatMask:
 802              	.LFB14:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 803              		.loc 1 662 0
 804              		.cfi_startproc
 805 0000 80B5     		push	{r7, lr}
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 7, -8
 808              		.cfi_offset 14, -4
 809 0002 82B0     		sub	sp, sp, #8
 810              		.cfi_def_cfa_offset 16
 811 0004 00AF     		add	r7, sp, #0
 812              		.cfi_def_cfa_register 7
 813 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 27


 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 814              		.loc 1 663 0
 815 0008 034B     		ldr	r3, .L58
 816 000a 7A68     		ldr	r2, [r7, #4]
 817 000c 0121     		mov	r1, #1
 818 000e 0A40     		and	r2, r1
 819 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 820              		.loc 1 664 0
 821 0012 BD46     		mov	sp, r7
 822 0014 02B0     		add	sp, sp, #8
 823              		@ sp needed
 824 0016 80BD     		pop	{r7, pc}
 825              	.L59:
 826              		.align	2
 827              	.L58:
 828 0018 28023A40 		.word	1077543464
 829              		.cfi_endproc
 830              	.LFE14:
 831              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 832              		.section	.text.ADC_SetOffset,"ax",%progbits
 833              		.align	2
 834              		.global	ADC_SetOffset
 835              		.code	16
 836              		.thumb_func
 837              		.type	ADC_SetOffset, %function
 838              	ADC_SetOffset:
 839              	.LFB15:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 840              		.loc 1 690 0
 841              		.cfi_startproc
 842 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 28


 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 82B0     		sub	sp, sp, #8
 847              		.cfi_def_cfa_offset 16
 848 0004 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 851 0008 0A1C     		mov	r2, r1
 852 000a BB1C     		add	r3, r7, #2
 853 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 854              		.loc 1 692 0
 855 000e 7B68     		ldr	r3, [r7, #4]
 856 0010 002B     		cmp	r3, #0
 857 0012 02D0     		beq	.L61
 858              		.loc 1 692 0 is_stmt 0 discriminator 1
 859 0014 0020     		mov	r0, #0
 860 0016 FFF7FEFF 		bl	CyHalt
 861              	.L61:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 862              		.loc 1 694 0 is_stmt 1
 863 001a 044B     		ldr	r3, .L62
 864 001c 7A68     		ldr	r2, [r7, #4]
 865 001e 5200     		lsl	r2, r2, #1
 866 0020 B91C     		add	r1, r7, #2
 867 0022 0988     		ldrh	r1, [r1]
 868 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 869              		.loc 1 695 0
 870 0026 BD46     		mov	sp, r7
 871 0028 02B0     		add	sp, sp, #8
 872              		@ sp needed
 873 002a 80BD     		pop	{r7, pc}
 874              	.L63:
 875              		.align	2
 876              	.L62:
 877 002c 00000000 		.word	ADC_offset
 878              		.cfi_endproc
 879              	.LFE15:
 880              		.size	ADC_SetOffset, .-ADC_SetOffset
 881              		.section	.text.ADC_SetGain,"ax",%progbits
 882              		.align	2
 883              		.global	ADC_SetGain
 884              		.code	16
 885              		.thumb_func
 886              		.type	ADC_SetGain, %function
 887              	ADC_SetGain:
 888              	.LFB16:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 29


 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 889              		.loc 1 724 0
 890              		.cfi_startproc
 891 0000 80B5     		push	{r7, lr}
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 7, -8
 894              		.cfi_offset 14, -4
 895 0002 82B0     		sub	sp, sp, #8
 896              		.cfi_def_cfa_offset 16
 897 0004 00AF     		add	r7, sp, #0
 898              		.cfi_def_cfa_register 7
 899 0006 7860     		str	r0, [r7, #4]
 900 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 901              		.loc 1 726 0
 902 000a 7B68     		ldr	r3, [r7, #4]
 903 000c 002B     		cmp	r3, #0
 904 000e 02D0     		beq	.L65
 905              		.loc 1 726 0 is_stmt 0 discriminator 1
 906 0010 0020     		mov	r0, #0
 907 0012 FFF7FEFF 		bl	CyHalt
 908              	.L65:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 909              		.loc 1 728 0 is_stmt 1
 910 0016 044B     		ldr	r3, .L66
 911 0018 7A68     		ldr	r2, [r7, #4]
 912 001a 9200     		lsl	r2, r2, #2
 913 001c 3968     		ldr	r1, [r7]
 914 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 915              		.loc 1 729 0
 916 0020 BD46     		mov	sp, r7
 917 0022 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 30


 918              		@ sp needed
 919 0024 80BD     		pop	{r7, pc}
 920              	.L67:
 921 0026 C046     		.align	2
 922              	.L66:
 923 0028 00000000 		.word	ADC_countsPer10Volt
 924              		.cfi_endproc
 925              	.LFE16:
 926              		.size	ADC_SetGain, .-ADC_SetGain
 927              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 928              		.align	2
 929              		.global	ADC_CountsTo_mVolts
 930              		.code	16
 931              		.thumb_func
 932              		.type	ADC_CountsTo_mVolts, %function
 933              	ADC_CountsTo_mVolts:
 934              	.LFB17:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 935              		.loc 1 757 0
 936              		.cfi_startproc
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 84B0     		sub	sp, sp, #16
 942              		.cfi_def_cfa_offset 24
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 945 0006 7860     		str	r0, [r7, #4]
 946 0008 0A1C     		mov	r2, r1
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 31


 947 000a BB1C     		add	r3, r7, #2
 948 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 949              		.loc 1 761 0
 950 000e 7B68     		ldr	r3, [r7, #4]
 951 0010 002B     		cmp	r3, #0
 952 0012 02D0     		beq	.L69
 953              		.loc 1 761 0 is_stmt 0 discriminator 1
 954 0014 0020     		mov	r0, #0
 955 0016 FFF7FEFF 		bl	CyHalt
 956              	.L69:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 957              		.loc 1 772 0 is_stmt 1
 958 001a 1F4B     		ldr	r3, .L75
 959 001c 7A68     		ldr	r2, [r7, #4]
 960 001e 5200     		lsl	r2, r2, #1
 961 0020 D35A     		ldrh	r3, [r2, r3]
 962 0022 99B2     		uxth	r1, r3
 963 0024 BB1C     		add	r3, r7, #2
 964 0026 1A88     		ldrh	r2, [r3]
 965 0028 8BB2     		uxth	r3, r1
 966 002a D31A     		sub	r3, r2, r3
 967 002c 9AB2     		uxth	r2, r3
 968 002e BB1C     		add	r3, r7, #2
 969 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 970              		.loc 1 774 0
 971 0032 BB1C     		add	r3, r7, #2
 972 0034 0022     		mov	r2, #0
 973 0036 9B5E     		ldrsh	r3, [r3, r2]
 974 0038 184A     		ldr	r2, .L75+4
 975 003a 5A43     		mul	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 976              		.loc 1 775 0
 977 003c BB1C     		add	r3, r7, #2
 978 003e 0021     		mov	r1, #0
 979 0040 5B5E     		ldrsh	r3, [r3, r1]
 980 0042 002B     		cmp	r3, #0
 981 0044 08DD     		ble	.L70
 982              		.loc 1 775 0 is_stmt 0 discriminator 1
 983 0046 164B     		ldr	r3, .L75+8
 984 0048 7968     		ldr	r1, [r7, #4]
 985 004a 8900     		lsl	r1, r1, #2
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 32


 986 004c CB58     		ldr	r3, [r1, r3]
 987 004e 002B     		cmp	r3, #0
 988 0050 00DA     		bge	.L71
 989 0052 0133     		add	r3, r3, #1
 990              	.L71:
 991 0054 5B10     		asr	r3, r3, #1
 992 0056 08E0     		b	.L72
 993              	.L70:
 994              		.loc 1 775 0 discriminator 2
 995 0058 114B     		ldr	r3, .L75+8
 996 005a 7968     		ldr	r1, [r7, #4]
 997 005c 8900     		lsl	r1, r1, #2
 998 005e CB58     		ldr	r3, [r1, r3]
 999 0060 002B     		cmp	r3, #0
 1000 0062 00DA     		bge	.L73
 1001 0064 0133     		add	r3, r3, #1
 1002              	.L73:
 1003 0066 5B10     		asr	r3, r3, #1
 1004 0068 5B42     		neg	r3, r3
 1005              	.L72:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1006              		.loc 1 774 0 is_stmt 1
 1007 006a D118     		add	r1, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1008              		.loc 1 776 0
 1009 006c 0C4B     		ldr	r3, .L75+8
 1010 006e 7A68     		ldr	r2, [r7, #4]
 1011 0070 9200     		lsl	r2, r2, #2
 1012 0072 D358     		ldr	r3, [r2, r3]
 1013 0074 081C     		mov	r0, r1
 1014 0076 191C     		mov	r1, r3
 1015 0078 FFF7FEFF 		bl	__aeabi_idiv
 1016 007c 031C     		mov	r3, r0
 1017 007e 1A1C     		mov	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1018              		.loc 1 774 0
 1019 0080 0E23     		mov	r3, #14
 1020 0082 FB18     		add	r3, r7, r3
 1021 0084 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1022              		.loc 1 778 0
 1023 0086 0E23     		mov	r3, #14
 1024 0088 FB18     		add	r3, r7, r3
 1025 008a 1B88     		ldrh	r3, [r3]
 1026 008c 1BB2     		sxth	r3, r3
 779:Generated_Source\PSoC4/ADC.c ****     }
 1027              		.loc 1 779 0
 1028 008e 181C     		mov	r0, r3
 1029 0090 BD46     		mov	sp, r7
 1030 0092 04B0     		add	sp, sp, #16
 1031              		@ sp needed
 1032 0094 80BD     		pop	{r7, pc}
 1033              	.L76:
 1034 0096 C046     		.align	2
 1035              	.L75:
 1036 0098 00000000 		.word	ADC_offset
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 33


 1037 009c 10270000 		.word	10000
 1038 00a0 00000000 		.word	ADC_countsPer10Volt
 1039              		.cfi_endproc
 1040              	.LFE17:
 1041              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1042              		.global	__aeabi_lmul
 1043              		.global	__aeabi_ldivmod
 1044              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1045              		.align	2
 1046              		.global	ADC_CountsTo_uVolts
 1047              		.code	16
 1048              		.thumb_func
 1049              		.type	ADC_CountsTo_uVolts, %function
 1050              	ADC_CountsTo_uVolts:
 1051              	.LFB18:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1052              		.loc 1 811 0
 1053              		.cfi_startproc
 1054 0000 B0B5     		push	{r4, r5, r7, lr}
 1055              		.cfi_def_cfa_offset 16
 1056              		.cfi_offset 4, -16
 1057              		.cfi_offset 5, -12
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 86B0     		sub	sp, sp, #24
 1061              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 34


 1062 0004 00AF     		add	r7, sp, #0
 1063              		.cfi_def_cfa_register 7
 1064 0006 F860     		str	r0, [r7, #12]
 1065 0008 0A1C     		mov	r2, r1
 1066 000a 0A23     		mov	r3, #10
 1067 000c FB18     		add	r3, r7, r3
 1068 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1069              		.loc 1 815 0
 1070 0010 FB68     		ldr	r3, [r7, #12]
 1071 0012 002B     		cmp	r3, #0
 1072 0014 02D0     		beq	.L78
 1073              		.loc 1 815 0 is_stmt 0 discriminator 1
 1074 0016 0020     		mov	r0, #0
 1075 0018 FFF7FEFF 		bl	CyHalt
 1076              	.L78:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1077              		.loc 1 826 0 is_stmt 1
 1078 001c 194B     		ldr	r3, .L80
 1079 001e FA68     		ldr	r2, [r7, #12]
 1080 0020 5200     		lsl	r2, r2, #1
 1081 0022 D35A     		ldrh	r3, [r2, r3]
 1082 0024 99B2     		uxth	r1, r3
 1083 0026 0A23     		mov	r3, #10
 1084 0028 FB18     		add	r3, r7, r3
 1085 002a 1A88     		ldrh	r2, [r3]
 1086 002c 8BB2     		uxth	r3, r1
 1087 002e D31A     		sub	r3, r2, r3
 1088 0030 9AB2     		uxth	r2, r3
 1089 0032 0A23     		mov	r3, #10
 1090 0034 FB18     		add	r3, r7, r3
 1091 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1092              		.loc 1 828 0
 1093 0038 0A23     		mov	r3, #10
 1094 003a FB18     		add	r3, r7, r3
 1095 003c 1B88     		ldrh	r3, [r3]
 1096 003e 1BB2     		sxth	r3, r3
 1097 0040 3B60     		str	r3, [r7]
 1098 0042 DB17     		asr	r3, r3, #31
 1099 0044 7B60     		str	r3, [r7, #4]
 1100 0046 3868     		ldr	r0, [r7]
 1101 0048 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 35


 1102 004a 0F4A     		ldr	r2, .L80+4
 1103 004c 0023     		mov	r3, #0
 1104 004e FFF7FEFF 		bl	__aeabi_lmul
 1105 0052 021C     		mov	r2, r0
 1106 0054 0B1C     		mov	r3, r1
 1107 0056 101C     		mov	r0, r2
 1108 0058 191C     		mov	r1, r3
 1109 005a 0C4B     		ldr	r3, .L80+8
 1110 005c FA68     		ldr	r2, [r7, #12]
 1111 005e 9200     		lsl	r2, r2, #2
 1112 0060 D358     		ldr	r3, [r2, r3]
 1113 0062 1C1C     		mov	r4, r3
 1114 0064 DB17     		asr	r3, r3, #31
 1115 0066 1D1C     		mov	r5, r3
 1116 0068 221C     		mov	r2, r4
 1117 006a 2B1C     		mov	r3, r5
 1118 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1119 0070 031C     		mov	r3, r0
 1120 0072 0C1C     		mov	r4, r1
 1121 0074 3B61     		str	r3, [r7, #16]
 1122 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1123              		.loc 1 830 0
 1124 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1125              		.loc 1 831 0
 1126 007a 181C     		mov	r0, r3
 1127 007c BD46     		mov	sp, r7
 1128 007e 06B0     		add	sp, sp, #24
 1129              		@ sp needed
 1130 0080 B0BD     		pop	{r4, r5, r7, pc}
 1131              	.L81:
 1132 0082 C046     		.align	2
 1133              	.L80:
 1134 0084 00000000 		.word	ADC_offset
 1135 0088 80969800 		.word	10000000
 1136 008c 00000000 		.word	ADC_countsPer10Volt
 1137              		.cfi_endproc
 1138              	.LFE18:
 1139              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1140              		.global	__aeabi_i2f
 1141              		.global	__aeabi_fmul
 1142              		.global	__aeabi_fdiv
 1143              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1144              		.align	2
 1145              		.global	ADC_CountsTo_Volts
 1146              		.code	16
 1147              		.thumb_func
 1148              		.type	ADC_CountsTo_Volts, %function
 1149              	ADC_CountsTo_Volts:
 1150              	.LFB19:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 36


 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1151              		.loc 1 856 0
 1152              		.cfi_startproc
 1153 0000 90B5     		push	{r4, r7, lr}
 1154              		.cfi_def_cfa_offset 12
 1155              		.cfi_offset 4, -12
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0002 85B0     		sub	sp, sp, #20
 1159              		.cfi_def_cfa_offset 32
 1160 0004 00AF     		add	r7, sp, #0
 1161              		.cfi_def_cfa_register 7
 1162 0006 7860     		str	r0, [r7, #4]
 1163 0008 0A1C     		mov	r2, r1
 1164 000a BB1C     		add	r3, r7, #2
 1165 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1166              		.loc 1 860 0
 1167 000e 7B68     		ldr	r3, [r7, #4]
 1168 0010 002B     		cmp	r3, #0
 1169 0012 02D0     		beq	.L83
 1170              		.loc 1 860 0 is_stmt 0 discriminator 1
 1171 0014 0020     		mov	r0, #0
 1172 0016 FFF7FEFF 		bl	CyHalt
 1173              	.L83:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 37


 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1174              		.loc 1 871 0 is_stmt 1
 1175 001a 164B     		ldr	r3, .L85
 1176 001c 7A68     		ldr	r2, [r7, #4]
 1177 001e 5200     		lsl	r2, r2, #1
 1178 0020 D35A     		ldrh	r3, [r2, r3]
 1179 0022 99B2     		uxth	r1, r3
 1180 0024 BB1C     		add	r3, r7, #2
 1181 0026 1A88     		ldrh	r2, [r3]
 1182 0028 8BB2     		uxth	r3, r1
 1183 002a D31A     		sub	r3, r2, r3
 1184 002c 9AB2     		uxth	r2, r3
 1185 002e BB1C     		add	r3, r7, #2
 1186 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1187              		.loc 1 873 0
 1188 0032 BB1C     		add	r3, r7, #2
 1189 0034 0022     		mov	r2, #0
 1190 0036 9B5E     		ldrsh	r3, [r3, r2]
 1191 0038 181C     		mov	r0, r3
 1192 003a FFF7FEFF 		bl	__aeabi_i2f
 1193 003e 031C     		add	r3, r0, #0
 1194 0040 181C     		add	r0, r3, #0
 1195 0042 0D49     		ldr	r1, .L85+4
 1196 0044 FFF7FEFF 		bl	__aeabi_fmul
 1197 0048 031C     		add	r3, r0, #0
 1198 004a 1C1C     		add	r4, r3, #0
 1199 004c 0B4B     		ldr	r3, .L85+8
 1200 004e 7A68     		ldr	r2, [r7, #4]
 1201 0050 9200     		lsl	r2, r2, #2
 1202 0052 D358     		ldr	r3, [r2, r3]
 1203 0054 181C     		mov	r0, r3
 1204 0056 FFF7FEFF 		bl	__aeabi_i2f
 1205 005a 031C     		add	r3, r0, #0
 1206 005c 201C     		add	r0, r4, #0
 1207 005e 191C     		add	r1, r3, #0
 1208 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1209 0064 031C     		add	r3, r0, #0
 1210 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1211              		.loc 1 875 0
 1212 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1213              		.loc 1 876 0
 1214 006a 181C     		add	r0, r3, #0
 1215 006c BD46     		mov	sp, r7
 1216 006e 05B0     		add	sp, sp, #20
 1217              		@ sp needed
 1218 0070 90BD     		pop	{r4, r7, pc}
 1219              	.L86:
 1220 0072 C046     		.align	2
 1221              	.L85:
 1222 0074 00000000 		.word	ADC_offset
 1223 0078 00002041 		.word	1092616192
 1224 007c 00000000 		.word	ADC_countsPer10Volt
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 38


 1225              		.cfi_endproc
 1226              	.LFE19:
 1227              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1228              		.text
 1229              	.Letext0:
 1230              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1231              		.section	.debug_info,"",%progbits
 1232              	.Ldebug_info0:
 1233 0000 77040000 		.4byte	0x477
 1234 0004 0400     		.2byte	0x4
 1235 0006 00000000 		.4byte	.Ldebug_abbrev0
 1236 000a 04       		.byte	0x4
 1237 000b 01       		.uleb128 0x1
 1238 000c 27000000 		.4byte	.LASF59
 1239 0010 01       		.byte	0x1
 1240 0011 E6020000 		.4byte	.LASF60
 1241 0015 FA000000 		.4byte	.LASF61
 1242 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1243 001d 00000000 		.4byte	0
 1244 0021 00000000 		.4byte	.Ldebug_line0
 1245 0025 02       		.uleb128 0x2
 1246 0026 01       		.byte	0x1
 1247 0027 06       		.byte	0x6
 1248 0028 4E030000 		.4byte	.LASF0
 1249 002c 02       		.uleb128 0x2
 1250 002d 01       		.byte	0x1
 1251 002e 08       		.byte	0x8
 1252 002f 82010000 		.4byte	.LASF1
 1253 0033 02       		.uleb128 0x2
 1254 0034 02       		.byte	0x2
 1255 0035 05       		.byte	0x5
 1256 0036 2A010000 		.4byte	.LASF2
 1257 003a 02       		.uleb128 0x2
 1258 003b 02       		.byte	0x2
 1259 003c 07       		.byte	0x7
 1260 003d E7000000 		.4byte	.LASF3
 1261 0041 02       		.uleb128 0x2
 1262 0042 04       		.byte	0x4
 1263 0043 05       		.byte	0x5
 1264 0044 40030000 		.4byte	.LASF4
 1265 0048 02       		.uleb128 0x2
 1266 0049 04       		.byte	0x4
 1267 004a 07       		.byte	0x7
 1268 004b A7010000 		.4byte	.LASF5
 1269 004f 02       		.uleb128 0x2
 1270 0050 08       		.byte	0x8
 1271 0051 05       		.byte	0x5
 1272 0052 00000000 		.4byte	.LASF6
 1273 0056 02       		.uleb128 0x2
 1274 0057 08       		.byte	0x8
 1275 0058 07       		.byte	0x7
 1276 0059 62020000 		.4byte	.LASF7
 1277 005d 03       		.uleb128 0x3
 1278 005e 04       		.byte	0x4
 1279 005f 05       		.byte	0x5
 1280 0060 696E7400 		.ascii	"int\000"
 1281 0064 02       		.uleb128 0x2
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 39


 1282 0065 04       		.byte	0x4
 1283 0066 07       		.byte	0x7
 1284 0067 43020000 		.4byte	.LASF8
 1285 006b 04       		.uleb128 0x4
 1286 006c 26030000 		.4byte	.LASF9
 1287 0070 02       		.byte	0x2
 1288 0071 B901     		.2byte	0x1b9
 1289 0073 2C000000 		.4byte	0x2c
 1290 0077 04       		.uleb128 0x4
 1291 0078 1A020000 		.4byte	.LASF10
 1292 007c 02       		.byte	0x2
 1293 007d BA01     		.2byte	0x1ba
 1294 007f 3A000000 		.4byte	0x3a
 1295 0083 04       		.uleb128 0x4
 1296 0084 2B020000 		.4byte	.LASF11
 1297 0088 02       		.byte	0x2
 1298 0089 BB01     		.2byte	0x1bb
 1299 008b 48000000 		.4byte	0x48
 1300 008f 04       		.uleb128 0x4
 1301 0090 A1010000 		.4byte	.LASF12
 1302 0094 02       		.byte	0x2
 1303 0095 BD01     		.2byte	0x1bd
 1304 0097 33000000 		.4byte	0x33
 1305 009b 04       		.uleb128 0x4
 1306 009c B9010000 		.4byte	.LASF13
 1307 00a0 02       		.byte	0x2
 1308 00a1 BE01     		.2byte	0x1be
 1309 00a3 41000000 		.4byte	0x41
 1310 00a7 04       		.uleb128 0x4
 1311 00a8 59010000 		.4byte	.LASF14
 1312 00ac 02       		.byte	0x2
 1313 00ad BF01     		.2byte	0x1bf
 1314 00af B3000000 		.4byte	0xb3
 1315 00b3 02       		.uleb128 0x2
 1316 00b4 04       		.byte	0x4
 1317 00b5 04       		.byte	0x4
 1318 00b6 BC000000 		.4byte	.LASF15
 1319 00ba 02       		.uleb128 0x2
 1320 00bb 08       		.byte	0x8
 1321 00bc 04       		.byte	0x4
 1322 00bd 02020000 		.4byte	.LASF16
 1323 00c1 04       		.uleb128 0x4
 1324 00c2 66030000 		.4byte	.LASF17
 1325 00c6 02       		.byte	0x2
 1326 00c7 C401     		.2byte	0x1c4
 1327 00c9 4F000000 		.4byte	0x4f
 1328 00cd 02       		.uleb128 0x2
 1329 00ce 01       		.byte	0x1
 1330 00cf 08       		.byte	0x8
 1331 00d0 49030000 		.4byte	.LASF18
 1332 00d4 04       		.uleb128 0x4
 1333 00d5 21000000 		.4byte	.LASF19
 1334 00d9 02       		.byte	0x2
 1335 00da 6502     		.2byte	0x265
 1336 00dc E0000000 		.4byte	0xe0
 1337 00e0 05       		.uleb128 0x5
 1338 00e1 83000000 		.4byte	0x83
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 40


 1339 00e5 02       		.uleb128 0x2
 1340 00e6 04       		.byte	0x4
 1341 00e7 07       		.byte	0x7
 1342 00e8 A5020000 		.4byte	.LASF20
 1343 00ec 06       		.uleb128 0x6
 1344 00ed 80020000 		.4byte	.LASF24
 1345 00f1 01       		.byte	0x1
 1346 00f2 3F       		.byte	0x3f
 1347 00f3 00000000 		.4byte	.LFB2
 1348 00f7 24000000 		.4byte	.LFE2-.LFB2
 1349 00fb 01       		.uleb128 0x1
 1350 00fc 9C       		.byte	0x9c
 1351 00fd 07       		.uleb128 0x7
 1352 00fe 8A020000 		.4byte	.LASF35
 1353 0102 01       		.byte	0x1
 1354 0103 5E       		.byte	0x5e
 1355 0104 00000000 		.4byte	.LFB3
 1356 0108 D8010000 		.4byte	.LFE3-.LFB3
 1357 010c 01       		.uleb128 0x1
 1358 010d 9C       		.byte	0x9c
 1359 010e 3D010000 		.4byte	0x13d
 1360 0112 08       		.uleb128 0x8
 1361 0113 08030000 		.4byte	.LASF21
 1362 0117 01       		.byte	0x1
 1363 0118 60       		.byte	0x60
 1364 0119 83000000 		.4byte	0x83
 1365 011d 02       		.uleb128 0x2
 1366 011e 91       		.byte	0x91
 1367 011f 74       		.sleb128 -12
 1368 0120 08       		.uleb128 0x8
 1369 0121 6C010000 		.4byte	.LASF22
 1370 0125 01       		.byte	0x1
 1371 0126 61       		.byte	0x61
 1372 0127 83000000 		.4byte	0x83
 1373 012b 02       		.uleb128 0x2
 1374 012c 91       		.byte	0x91
 1375 012d 6C       		.sleb128 -20
 1376 012e 08       		.uleb128 0x8
 1377 012f 5B020000 		.4byte	.LASF23
 1378 0133 01       		.byte	0x1
 1379 0134 62       		.byte	0x62
 1380 0135 9B000000 		.4byte	0x9b
 1381 0139 02       		.uleb128 0x2
 1382 013a 91       		.byte	0x91
 1383 013b 70       		.sleb128 -16
 1384 013c 00       		.byte	0
 1385 013d 09       		.uleb128 0x9
 1386 013e 50020000 		.4byte	.LASF25
 1387 0142 01       		.byte	0x1
 1388 0143 4A01     		.2byte	0x14a
 1389 0145 00000000 		.4byte	.LFB4
 1390 0149 38000000 		.4byte	.LFE4-.LFB4
 1391 014d 01       		.uleb128 0x1
 1392 014e 9C       		.byte	0x9c
 1393 014f 0A       		.uleb128 0xa
 1394 0150 6C030000 		.4byte	.LASF26
 1395 0154 01       		.byte	0x1
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 41


 1396 0155 6D01     		.2byte	0x16d
 1397 0157 00000000 		.4byte	.LFB5
 1398 015b 18000000 		.4byte	.LFE5-.LFB5
 1399 015f 01       		.uleb128 0x1
 1400 0160 9C       		.byte	0x9c
 1401 0161 0A       		.uleb128 0xa
 1402 0162 D5020000 		.4byte	.LASF27
 1403 0166 01       		.byte	0x1
 1404 0167 8701     		.2byte	0x187
 1405 0169 00000000 		.4byte	.LFB6
 1406 016d 14000000 		.4byte	.LFE6-.LFB6
 1407 0171 01       		.uleb128 0x1
 1408 0172 9C       		.byte	0x9c
 1409 0173 0A       		.uleb128 0xa
 1410 0174 16030000 		.4byte	.LASF28
 1411 0178 01       		.byte	0x1
 1412 0179 A001     		.2byte	0x1a0
 1413 017b 00000000 		.4byte	.LFB7
 1414 017f 08000000 		.4byte	.LFE7-.LFB7
 1415 0183 01       		.uleb128 0x1
 1416 0184 9C       		.byte	0x9c
 1417 0185 0B       		.uleb128 0xb
 1418 0186 EE010000 		.4byte	.LASF30
 1419 018a 01       		.byte	0x1
 1420 018b C201     		.2byte	0x1c2
 1421 018d 83000000 		.4byte	0x83
 1422 0191 00000000 		.4byte	.LFB8
 1423 0195 48000000 		.4byte	.LFE8-.LFB8
 1424 0199 01       		.uleb128 0x1
 1425 019a 9C       		.byte	0x9c
 1426 019b BE010000 		.4byte	0x1be
 1427 019f 0C       		.uleb128 0xc
 1428 01a0 0E030000 		.4byte	.LASF32
 1429 01a4 01       		.byte	0x1
 1430 01a5 C201     		.2byte	0x1c2
 1431 01a7 83000000 		.4byte	0x83
 1432 01ab 02       		.uleb128 0x2
 1433 01ac 91       		.byte	0x91
 1434 01ad 6C       		.sleb128 -20
 1435 01ae 0D       		.uleb128 0xd
 1436 01af 52010000 		.4byte	.LASF29
 1437 01b3 01       		.byte	0x1
 1438 01b4 C401     		.2byte	0x1c4
 1439 01b6 83000000 		.4byte	0x83
 1440 01ba 02       		.uleb128 0x2
 1441 01bb 91       		.byte	0x91
 1442 01bc 74       		.sleb128 -12
 1443 01bd 00       		.byte	0
 1444 01be 0E       		.uleb128 0xe
 1445 01bf BF010000 		.4byte	.LASF31
 1446 01c3 01       		.byte	0x1
 1447 01c4 F801     		.2byte	0x1f8
 1448 01c6 8F000000 		.4byte	0x8f
 1449 01ca 00000000 		.4byte	.LFB9
 1450 01ce 44000000 		.4byte	.LFE9-.LFB9
 1451 01d2 01       		.uleb128 0x1
 1452 01d3 9C       		.byte	0x9c
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 42


 1453 01d4 F7010000 		.4byte	0x1f7
 1454 01d8 0C       		.uleb128 0xc
 1455 01d9 99020000 		.4byte	.LASF33
 1456 01dd 01       		.byte	0x1
 1457 01de F801     		.2byte	0x1f8
 1458 01e0 83000000 		.4byte	0x83
 1459 01e4 02       		.uleb128 0x2
 1460 01e5 91       		.byte	0x91
 1461 01e6 6C       		.sleb128 -20
 1462 01e7 0D       		.uleb128 0xd
 1463 01e8 79020000 		.4byte	.LASF34
 1464 01ec 01       		.byte	0x1
 1465 01ed FA01     		.2byte	0x1fa
 1466 01ef 83000000 		.4byte	0x83
 1467 01f3 02       		.uleb128 0x2
 1468 01f4 91       		.byte	0x91
 1469 01f5 74       		.sleb128 -12
 1470 01f6 00       		.byte	0
 1471 01f7 0F       		.uleb128 0xf
 1472 01f8 CF010000 		.4byte	.LASF36
 1473 01fc 01       		.byte	0x1
 1474 01fd 2502     		.2byte	0x225
 1475 01ff 00000000 		.4byte	.LFB10
 1476 0203 1C000000 		.4byte	.LFE10-.LFB10
 1477 0207 01       		.uleb128 0x1
 1478 0208 9C       		.byte	0x9c
 1479 0209 1D020000 		.4byte	0x21d
 1480 020d 0C       		.uleb128 0xc
 1481 020e 03030000 		.4byte	.LASF37
 1482 0212 01       		.byte	0x1
 1483 0213 2502     		.2byte	0x225
 1484 0215 83000000 		.4byte	0x83
 1485 0219 02       		.uleb128 0x2
 1486 021a 91       		.byte	0x91
 1487 021b 74       		.sleb128 -12
 1488 021c 00       		.byte	0
 1489 021d 0F       		.uleb128 0xf
 1490 021e 42010000 		.4byte	.LASF38
 1491 0222 01       		.byte	0x1
 1492 0223 5102     		.2byte	0x251
 1493 0225 00000000 		.4byte	.LFB11
 1494 0229 30000000 		.4byte	.LFE11-.LFB11
 1495 022d 01       		.uleb128 0x1
 1496 022e 9C       		.byte	0x9c
 1497 022f 43020000 		.4byte	0x243
 1498 0233 0C       		.uleb128 0xc
 1499 0234 09020000 		.4byte	.LASF39
 1500 0238 01       		.byte	0x1
 1501 0239 5102     		.2byte	0x251
 1502 023b 83000000 		.4byte	0x83
 1503 023f 02       		.uleb128 0x2
 1504 0240 91       		.byte	0x91
 1505 0241 74       		.sleb128 -12
 1506 0242 00       		.byte	0
 1507 0243 0F       		.uleb128 0xf
 1508 0244 90010000 		.4byte	.LASF40
 1509 0248 01       		.byte	0x1
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 43


 1510 0249 6602     		.2byte	0x266
 1511 024b 00000000 		.4byte	.LFB12
 1512 024f 2C000000 		.4byte	.LFE12-.LFB12
 1513 0253 01       		.uleb128 0x1
 1514 0254 9C       		.byte	0x9c
 1515 0255 69020000 		.4byte	0x269
 1516 0259 0C       		.uleb128 0xc
 1517 025a C2000000 		.4byte	.LASF41
 1518 025e 01       		.byte	0x1
 1519 025f 6602     		.2byte	0x266
 1520 0261 83000000 		.4byte	0x83
 1521 0265 02       		.uleb128 0x2
 1522 0266 91       		.byte	0x91
 1523 0267 74       		.sleb128 -12
 1524 0268 00       		.byte	0
 1525 0269 0F       		.uleb128 0xf
 1526 026a 32020000 		.4byte	.LASF42
 1527 026e 01       		.byte	0x1
 1528 026f 7E02     		.2byte	0x27e
 1529 0271 00000000 		.4byte	.LFB13
 1530 0275 1C000000 		.4byte	.LFE13-.LFB13
 1531 0279 01       		.uleb128 0x1
 1532 027a 9C       		.byte	0x9c
 1533 027b 8F020000 		.4byte	0x28f
 1534 027f 0C       		.uleb128 0xc
 1535 0280 03030000 		.4byte	.LASF37
 1536 0284 01       		.byte	0x1
 1537 0285 7E02     		.2byte	0x27e
 1538 0287 83000000 		.4byte	0x83
 1539 028b 02       		.uleb128 0x2
 1540 028c 91       		.byte	0x91
 1541 028d 74       		.sleb128 -12
 1542 028e 00       		.byte	0
 1543 028f 0F       		.uleb128 0xf
 1544 0290 DF010000 		.4byte	.LASF43
 1545 0294 01       		.byte	0x1
 1546 0295 9502     		.2byte	0x295
 1547 0297 00000000 		.4byte	.LFB14
 1548 029b 1C000000 		.4byte	.LFE14-.LFB14
 1549 029f 01       		.uleb128 0x1
 1550 02a0 9C       		.byte	0x9c
 1551 02a1 B5020000 		.4byte	0x2b5
 1552 02a5 0C       		.uleb128 0xc
 1553 02a6 03030000 		.4byte	.LASF37
 1554 02aa 01       		.byte	0x1
 1555 02ab 9502     		.2byte	0x295
 1556 02ad 83000000 		.4byte	0x83
 1557 02b1 02       		.uleb128 0x2
 1558 02b2 91       		.byte	0x91
 1559 02b3 74       		.sleb128 -12
 1560 02b4 00       		.byte	0
 1561 02b5 10       		.uleb128 0x10
 1562 02b6 34010000 		.4byte	.LASF44
 1563 02ba 01       		.byte	0x1
 1564 02bb B102     		.2byte	0x2b1
 1565 02bd 00000000 		.4byte	.LFB15
 1566 02c1 30000000 		.4byte	.LFE15-.LFB15
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 44


 1567 02c5 01       		.uleb128 0x1
 1568 02c6 9C       		.byte	0x9c
 1569 02c7 EA020000 		.4byte	0x2ea
 1570 02cb 0C       		.uleb128 0xc
 1571 02cc 99020000 		.4byte	.LASF33
 1572 02d0 01       		.byte	0x1
 1573 02d1 B102     		.2byte	0x2b1
 1574 02d3 83000000 		.4byte	0x83
 1575 02d7 02       		.uleb128 0x2
 1576 02d8 91       		.byte	0x91
 1577 02d9 74       		.sleb128 -12
 1578 02da 0C       		.uleb128 0xc
 1579 02db B5000000 		.4byte	.LASF45
 1580 02df 01       		.byte	0x1
 1581 02e0 B102     		.2byte	0x2b1
 1582 02e2 8F000000 		.4byte	0x8f
 1583 02e6 02       		.uleb128 0x2
 1584 02e7 91       		.byte	0x91
 1585 02e8 72       		.sleb128 -14
 1586 02e9 00       		.byte	0
 1587 02ea 10       		.uleb128 0x10
 1588 02eb 76010000 		.4byte	.LASF46
 1589 02ef 01       		.byte	0x1
 1590 02f0 D302     		.2byte	0x2d3
 1591 02f2 00000000 		.4byte	.LFB16
 1592 02f6 2C000000 		.4byte	.LFE16-.LFB16
 1593 02fa 01       		.uleb128 0x1
 1594 02fb 9C       		.byte	0x9c
 1595 02fc 1F030000 		.4byte	0x31f
 1596 0300 0C       		.uleb128 0xc
 1597 0301 99020000 		.4byte	.LASF33
 1598 0305 01       		.byte	0x1
 1599 0306 D302     		.2byte	0x2d3
 1600 0308 83000000 		.4byte	0x83
 1601 030c 02       		.uleb128 0x2
 1602 030d 91       		.byte	0x91
 1603 030e 74       		.sleb128 -12
 1604 030f 0C       		.uleb128 0xc
 1605 0310 12020000 		.4byte	.LASF47
 1606 0314 01       		.byte	0x1
 1607 0315 D302     		.2byte	0x2d3
 1608 0317 9B000000 		.4byte	0x9b
 1609 031b 02       		.uleb128 0x2
 1610 031c 91       		.byte	0x91
 1611 031d 70       		.sleb128 -16
 1612 031e 00       		.byte	0
 1613 031f 0E       		.uleb128 0xe
 1614 0320 CC000000 		.4byte	.LASF48
 1615 0324 01       		.byte	0x1
 1616 0325 F402     		.2byte	0x2f4
 1617 0327 8F000000 		.4byte	0x8f
 1618 032b 00000000 		.4byte	.LFB17
 1619 032f A4000000 		.4byte	.LFE17-.LFB17
 1620 0333 01       		.uleb128 0x1
 1621 0334 9C       		.byte	0x9c
 1622 0335 67030000 		.4byte	0x367
 1623 0339 0C       		.uleb128 0xc
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 45


 1624 033a 99020000 		.4byte	.LASF33
 1625 033e 01       		.byte	0x1
 1626 033f F402     		.2byte	0x2f4
 1627 0341 83000000 		.4byte	0x83
 1628 0345 02       		.uleb128 0x2
 1629 0346 91       		.byte	0x91
 1630 0347 6C       		.sleb128 -20
 1631 0348 0C       		.uleb128 0xc
 1632 0349 21020000 		.4byte	.LASF49
 1633 034d 01       		.byte	0x1
 1634 034e F402     		.2byte	0x2f4
 1635 0350 8F000000 		.4byte	0x8f
 1636 0354 02       		.uleb128 0x2
 1637 0355 91       		.byte	0x91
 1638 0356 6A       		.sleb128 -22
 1639 0357 0D       		.uleb128 0xd
 1640 0358 9E020000 		.4byte	.LASF50
 1641 035c 01       		.byte	0x1
 1642 035d F602     		.2byte	0x2f6
 1643 035f 8F000000 		.4byte	0x8f
 1644 0363 02       		.uleb128 0x2
 1645 0364 91       		.byte	0x91
 1646 0365 76       		.sleb128 -10
 1647 0366 00       		.byte	0
 1648 0367 0E       		.uleb128 0xe
 1649 0368 AE020000 		.4byte	.LASF51
 1650 036c 01       		.byte	0x1
 1651 036d 2A03     		.2byte	0x32a
 1652 036f 9B000000 		.4byte	0x9b
 1653 0373 00000000 		.4byte	.LFB18
 1654 0377 90000000 		.4byte	.LFE18-.LFB18
 1655 037b 01       		.uleb128 0x1
 1656 037c 9C       		.byte	0x9c
 1657 037d AF030000 		.4byte	0x3af
 1658 0381 0C       		.uleb128 0xc
 1659 0382 99020000 		.4byte	.LASF33
 1660 0386 01       		.byte	0x1
 1661 0387 2A03     		.2byte	0x32a
 1662 0389 83000000 		.4byte	0x83
 1663 038d 02       		.uleb128 0x2
 1664 038e 91       		.byte	0x91
 1665 038f 64       		.sleb128 -28
 1666 0390 0C       		.uleb128 0xc
 1667 0391 21020000 		.4byte	.LASF49
 1668 0395 01       		.byte	0x1
 1669 0396 2A03     		.2byte	0x32a
 1670 0398 8F000000 		.4byte	0x8f
 1671 039c 02       		.uleb128 0x2
 1672 039d 91       		.byte	0x91
 1673 039e 62       		.sleb128 -30
 1674 039f 0D       		.uleb128 0xd
 1675 03a0 E0000000 		.4byte	.LASF52
 1676 03a4 01       		.byte	0x1
 1677 03a5 2C03     		.2byte	0x32c
 1678 03a7 C1000000 		.4byte	0xc1
 1679 03ab 02       		.uleb128 0x2
 1680 03ac 91       		.byte	0x91
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 46


 1681 03ad 68       		.sleb128 -24
 1682 03ae 00       		.byte	0
 1683 03af 0E       		.uleb128 0xe
 1684 03b0 C2020000 		.4byte	.LASF53
 1685 03b4 01       		.byte	0x1
 1686 03b5 5703     		.2byte	0x357
 1687 03b7 A7000000 		.4byte	0xa7
 1688 03bb 00000000 		.4byte	.LFB19
 1689 03bf 80000000 		.4byte	.LFE19-.LFB19
 1690 03c3 01       		.uleb128 0x1
 1691 03c4 9C       		.byte	0x9c
 1692 03c5 F7030000 		.4byte	0x3f7
 1693 03c9 0C       		.uleb128 0xc
 1694 03ca 99020000 		.4byte	.LASF33
 1695 03ce 01       		.byte	0x1
 1696 03cf 5703     		.2byte	0x357
 1697 03d1 83000000 		.4byte	0x83
 1698 03d5 02       		.uleb128 0x2
 1699 03d6 91       		.byte	0x91
 1700 03d7 64       		.sleb128 -28
 1701 03d8 0C       		.uleb128 0xc
 1702 03d9 21020000 		.4byte	.LASF49
 1703 03dd 01       		.byte	0x1
 1704 03de 5703     		.2byte	0x357
 1705 03e0 8F000000 		.4byte	0x8f
 1706 03e4 02       		.uleb128 0x2
 1707 03e5 91       		.byte	0x91
 1708 03e6 62       		.sleb128 -30
 1709 03e7 0D       		.uleb128 0xd
 1710 03e8 93020000 		.4byte	.LASF54
 1711 03ec 01       		.byte	0x1
 1712 03ed 5903     		.2byte	0x359
 1713 03ef A7000000 		.4byte	0xa7
 1714 03f3 02       		.uleb128 0x2
 1715 03f4 91       		.byte	0x91
 1716 03f5 6C       		.sleb128 -20
 1717 03f6 00       		.byte	0
 1718 03f7 11       		.uleb128 0x11
 1719 03f8 83000000 		.4byte	0x83
 1720 03fc 07040000 		.4byte	0x407
 1721 0400 12       		.uleb128 0x12
 1722 0401 E5000000 		.4byte	0xe5
 1723 0405 00       		.byte	0
 1724 0406 00       		.byte	0
 1725 0407 08       		.uleb128 0x8
 1726 0408 0E000000 		.4byte	.LASF55
 1727 040c 01       		.byte	0x1
 1728 040d 21       		.byte	0x21
 1729 040e 18040000 		.4byte	0x418
 1730 0412 05       		.uleb128 0x5
 1731 0413 03       		.byte	0x3
 1732 0414 00000000 		.4byte	ADC_channelsConfig
 1733 0418 13       		.uleb128 0x13
 1734 0419 F7030000 		.4byte	0x3f7
 1735 041d 14       		.uleb128 0x14
 1736 041e 5A030000 		.4byte	.LASF56
 1737 0422 01       		.byte	0x1
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 47


 1738 0423 18       		.byte	0x18
 1739 0424 6B000000 		.4byte	0x6b
 1740 0428 05       		.uleb128 0x5
 1741 0429 03       		.byte	0x3
 1742 042a 00000000 		.4byte	ADC_initVar
 1743 042e 11       		.uleb128 0x11
 1744 042f 8F000000 		.4byte	0x8f
 1745 0433 3E040000 		.4byte	0x43e
 1746 0437 12       		.uleb128 0x12
 1747 0438 E5000000 		.4byte	0xe5
 1748 043c 00       		.byte	0
 1749 043d 00       		.byte	0
 1750 043e 14       		.uleb128 0x14
 1751 043f 61010000 		.4byte	.LASF57
 1752 0443 01       		.byte	0x1
 1753 0444 19       		.byte	0x19
 1754 0445 4F040000 		.4byte	0x44f
 1755 0449 05       		.uleb128 0x5
 1756 044a 03       		.byte	0x3
 1757 044b 00000000 		.4byte	ADC_offset
 1758 044f 05       		.uleb128 0x5
 1759 0450 2E040000 		.4byte	0x42e
 1760 0454 11       		.uleb128 0x11
 1761 0455 9B000000 		.4byte	0x9b
 1762 0459 64040000 		.4byte	0x464
 1763 045d 12       		.uleb128 0x12
 1764 045e E5000000 		.4byte	0xe5
 1765 0462 00       		.byte	0
 1766 0463 00       		.byte	0
 1767 0464 14       		.uleb128 0x14
 1768 0465 2C030000 		.4byte	.LASF58
 1769 0469 01       		.byte	0x1
 1770 046a 1A       		.byte	0x1a
 1771 046b 75040000 		.4byte	0x475
 1772 046f 05       		.uleb128 0x5
 1773 0470 03       		.byte	0x3
 1774 0471 00000000 		.4byte	ADC_countsPer10Volt
 1775 0475 05       		.uleb128 0x5
 1776 0476 54040000 		.4byte	0x454
 1777 047a 00       		.byte	0
 1778              		.section	.debug_abbrev,"",%progbits
 1779              	.Ldebug_abbrev0:
 1780 0000 01       		.uleb128 0x1
 1781 0001 11       		.uleb128 0x11
 1782 0002 01       		.byte	0x1
 1783 0003 25       		.uleb128 0x25
 1784 0004 0E       		.uleb128 0xe
 1785 0005 13       		.uleb128 0x13
 1786 0006 0B       		.uleb128 0xb
 1787 0007 03       		.uleb128 0x3
 1788 0008 0E       		.uleb128 0xe
 1789 0009 1B       		.uleb128 0x1b
 1790 000a 0E       		.uleb128 0xe
 1791 000b 55       		.uleb128 0x55
 1792 000c 17       		.uleb128 0x17
 1793 000d 11       		.uleb128 0x11
 1794 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 48


 1795 000f 10       		.uleb128 0x10
 1796 0010 17       		.uleb128 0x17
 1797 0011 00       		.byte	0
 1798 0012 00       		.byte	0
 1799 0013 02       		.uleb128 0x2
 1800 0014 24       		.uleb128 0x24
 1801 0015 00       		.byte	0
 1802 0016 0B       		.uleb128 0xb
 1803 0017 0B       		.uleb128 0xb
 1804 0018 3E       		.uleb128 0x3e
 1805 0019 0B       		.uleb128 0xb
 1806 001a 03       		.uleb128 0x3
 1807 001b 0E       		.uleb128 0xe
 1808 001c 00       		.byte	0
 1809 001d 00       		.byte	0
 1810 001e 03       		.uleb128 0x3
 1811 001f 24       		.uleb128 0x24
 1812 0020 00       		.byte	0
 1813 0021 0B       		.uleb128 0xb
 1814 0022 0B       		.uleb128 0xb
 1815 0023 3E       		.uleb128 0x3e
 1816 0024 0B       		.uleb128 0xb
 1817 0025 03       		.uleb128 0x3
 1818 0026 08       		.uleb128 0x8
 1819 0027 00       		.byte	0
 1820 0028 00       		.byte	0
 1821 0029 04       		.uleb128 0x4
 1822 002a 16       		.uleb128 0x16
 1823 002b 00       		.byte	0
 1824 002c 03       		.uleb128 0x3
 1825 002d 0E       		.uleb128 0xe
 1826 002e 3A       		.uleb128 0x3a
 1827 002f 0B       		.uleb128 0xb
 1828 0030 3B       		.uleb128 0x3b
 1829 0031 05       		.uleb128 0x5
 1830 0032 49       		.uleb128 0x49
 1831 0033 13       		.uleb128 0x13
 1832 0034 00       		.byte	0
 1833 0035 00       		.byte	0
 1834 0036 05       		.uleb128 0x5
 1835 0037 35       		.uleb128 0x35
 1836 0038 00       		.byte	0
 1837 0039 49       		.uleb128 0x49
 1838 003a 13       		.uleb128 0x13
 1839 003b 00       		.byte	0
 1840 003c 00       		.byte	0
 1841 003d 06       		.uleb128 0x6
 1842 003e 2E       		.uleb128 0x2e
 1843 003f 00       		.byte	0
 1844 0040 3F       		.uleb128 0x3f
 1845 0041 19       		.uleb128 0x19
 1846 0042 03       		.uleb128 0x3
 1847 0043 0E       		.uleb128 0xe
 1848 0044 3A       		.uleb128 0x3a
 1849 0045 0B       		.uleb128 0xb
 1850 0046 3B       		.uleb128 0x3b
 1851 0047 0B       		.uleb128 0xb
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 49


 1852 0048 27       		.uleb128 0x27
 1853 0049 19       		.uleb128 0x19
 1854 004a 11       		.uleb128 0x11
 1855 004b 01       		.uleb128 0x1
 1856 004c 12       		.uleb128 0x12
 1857 004d 06       		.uleb128 0x6
 1858 004e 40       		.uleb128 0x40
 1859 004f 18       		.uleb128 0x18
 1860 0050 9642     		.uleb128 0x2116
 1861 0052 19       		.uleb128 0x19
 1862 0053 00       		.byte	0
 1863 0054 00       		.byte	0
 1864 0055 07       		.uleb128 0x7
 1865 0056 2E       		.uleb128 0x2e
 1866 0057 01       		.byte	0x1
 1867 0058 3F       		.uleb128 0x3f
 1868 0059 19       		.uleb128 0x19
 1869 005a 03       		.uleb128 0x3
 1870 005b 0E       		.uleb128 0xe
 1871 005c 3A       		.uleb128 0x3a
 1872 005d 0B       		.uleb128 0xb
 1873 005e 3B       		.uleb128 0x3b
 1874 005f 0B       		.uleb128 0xb
 1875 0060 27       		.uleb128 0x27
 1876 0061 19       		.uleb128 0x19
 1877 0062 11       		.uleb128 0x11
 1878 0063 01       		.uleb128 0x1
 1879 0064 12       		.uleb128 0x12
 1880 0065 06       		.uleb128 0x6
 1881 0066 40       		.uleb128 0x40
 1882 0067 18       		.uleb128 0x18
 1883 0068 9642     		.uleb128 0x2116
 1884 006a 19       		.uleb128 0x19
 1885 006b 01       		.uleb128 0x1
 1886 006c 13       		.uleb128 0x13
 1887 006d 00       		.byte	0
 1888 006e 00       		.byte	0
 1889 006f 08       		.uleb128 0x8
 1890 0070 34       		.uleb128 0x34
 1891 0071 00       		.byte	0
 1892 0072 03       		.uleb128 0x3
 1893 0073 0E       		.uleb128 0xe
 1894 0074 3A       		.uleb128 0x3a
 1895 0075 0B       		.uleb128 0xb
 1896 0076 3B       		.uleb128 0x3b
 1897 0077 0B       		.uleb128 0xb
 1898 0078 49       		.uleb128 0x49
 1899 0079 13       		.uleb128 0x13
 1900 007a 02       		.uleb128 0x2
 1901 007b 18       		.uleb128 0x18
 1902 007c 00       		.byte	0
 1903 007d 00       		.byte	0
 1904 007e 09       		.uleb128 0x9
 1905 007f 2E       		.uleb128 0x2e
 1906 0080 00       		.byte	0
 1907 0081 3F       		.uleb128 0x3f
 1908 0082 19       		.uleb128 0x19
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 50


 1909 0083 03       		.uleb128 0x3
 1910 0084 0E       		.uleb128 0xe
 1911 0085 3A       		.uleb128 0x3a
 1912 0086 0B       		.uleb128 0xb
 1913 0087 3B       		.uleb128 0x3b
 1914 0088 05       		.uleb128 0x5
 1915 0089 27       		.uleb128 0x27
 1916 008a 19       		.uleb128 0x19
 1917 008b 11       		.uleb128 0x11
 1918 008c 01       		.uleb128 0x1
 1919 008d 12       		.uleb128 0x12
 1920 008e 06       		.uleb128 0x6
 1921 008f 40       		.uleb128 0x40
 1922 0090 18       		.uleb128 0x18
 1923 0091 9642     		.uleb128 0x2116
 1924 0093 19       		.uleb128 0x19
 1925 0094 00       		.byte	0
 1926 0095 00       		.byte	0
 1927 0096 0A       		.uleb128 0xa
 1928 0097 2E       		.uleb128 0x2e
 1929 0098 00       		.byte	0
 1930 0099 3F       		.uleb128 0x3f
 1931 009a 19       		.uleb128 0x19
 1932 009b 03       		.uleb128 0x3
 1933 009c 0E       		.uleb128 0xe
 1934 009d 3A       		.uleb128 0x3a
 1935 009e 0B       		.uleb128 0xb
 1936 009f 3B       		.uleb128 0x3b
 1937 00a0 05       		.uleb128 0x5
 1938 00a1 27       		.uleb128 0x27
 1939 00a2 19       		.uleb128 0x19
 1940 00a3 11       		.uleb128 0x11
 1941 00a4 01       		.uleb128 0x1
 1942 00a5 12       		.uleb128 0x12
 1943 00a6 06       		.uleb128 0x6
 1944 00a7 40       		.uleb128 0x40
 1945 00a8 18       		.uleb128 0x18
 1946 00a9 9742     		.uleb128 0x2117
 1947 00ab 19       		.uleb128 0x19
 1948 00ac 00       		.byte	0
 1949 00ad 00       		.byte	0
 1950 00ae 0B       		.uleb128 0xb
 1951 00af 2E       		.uleb128 0x2e
 1952 00b0 01       		.byte	0x1
 1953 00b1 3F       		.uleb128 0x3f
 1954 00b2 19       		.uleb128 0x19
 1955 00b3 03       		.uleb128 0x3
 1956 00b4 0E       		.uleb128 0xe
 1957 00b5 3A       		.uleb128 0x3a
 1958 00b6 0B       		.uleb128 0xb
 1959 00b7 3B       		.uleb128 0x3b
 1960 00b8 05       		.uleb128 0x5
 1961 00b9 27       		.uleb128 0x27
 1962 00ba 19       		.uleb128 0x19
 1963 00bb 49       		.uleb128 0x49
 1964 00bc 13       		.uleb128 0x13
 1965 00bd 11       		.uleb128 0x11
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 51


 1966 00be 01       		.uleb128 0x1
 1967 00bf 12       		.uleb128 0x12
 1968 00c0 06       		.uleb128 0x6
 1969 00c1 40       		.uleb128 0x40
 1970 00c2 18       		.uleb128 0x18
 1971 00c3 9742     		.uleb128 0x2117
 1972 00c5 19       		.uleb128 0x19
 1973 00c6 01       		.uleb128 0x1
 1974 00c7 13       		.uleb128 0x13
 1975 00c8 00       		.byte	0
 1976 00c9 00       		.byte	0
 1977 00ca 0C       		.uleb128 0xc
 1978 00cb 05       		.uleb128 0x5
 1979 00cc 00       		.byte	0
 1980 00cd 03       		.uleb128 0x3
 1981 00ce 0E       		.uleb128 0xe
 1982 00cf 3A       		.uleb128 0x3a
 1983 00d0 0B       		.uleb128 0xb
 1984 00d1 3B       		.uleb128 0x3b
 1985 00d2 05       		.uleb128 0x5
 1986 00d3 49       		.uleb128 0x49
 1987 00d4 13       		.uleb128 0x13
 1988 00d5 02       		.uleb128 0x2
 1989 00d6 18       		.uleb128 0x18
 1990 00d7 00       		.byte	0
 1991 00d8 00       		.byte	0
 1992 00d9 0D       		.uleb128 0xd
 1993 00da 34       		.uleb128 0x34
 1994 00db 00       		.byte	0
 1995 00dc 03       		.uleb128 0x3
 1996 00dd 0E       		.uleb128 0xe
 1997 00de 3A       		.uleb128 0x3a
 1998 00df 0B       		.uleb128 0xb
 1999 00e0 3B       		.uleb128 0x3b
 2000 00e1 05       		.uleb128 0x5
 2001 00e2 49       		.uleb128 0x49
 2002 00e3 13       		.uleb128 0x13
 2003 00e4 02       		.uleb128 0x2
 2004 00e5 18       		.uleb128 0x18
 2005 00e6 00       		.byte	0
 2006 00e7 00       		.byte	0
 2007 00e8 0E       		.uleb128 0xe
 2008 00e9 2E       		.uleb128 0x2e
 2009 00ea 01       		.byte	0x1
 2010 00eb 3F       		.uleb128 0x3f
 2011 00ec 19       		.uleb128 0x19
 2012 00ed 03       		.uleb128 0x3
 2013 00ee 0E       		.uleb128 0xe
 2014 00ef 3A       		.uleb128 0x3a
 2015 00f0 0B       		.uleb128 0xb
 2016 00f1 3B       		.uleb128 0x3b
 2017 00f2 05       		.uleb128 0x5
 2018 00f3 27       		.uleb128 0x27
 2019 00f4 19       		.uleb128 0x19
 2020 00f5 49       		.uleb128 0x49
 2021 00f6 13       		.uleb128 0x13
 2022 00f7 11       		.uleb128 0x11
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 52


 2023 00f8 01       		.uleb128 0x1
 2024 00f9 12       		.uleb128 0x12
 2025 00fa 06       		.uleb128 0x6
 2026 00fb 40       		.uleb128 0x40
 2027 00fc 18       		.uleb128 0x18
 2028 00fd 9642     		.uleb128 0x2116
 2029 00ff 19       		.uleb128 0x19
 2030 0100 01       		.uleb128 0x1
 2031 0101 13       		.uleb128 0x13
 2032 0102 00       		.byte	0
 2033 0103 00       		.byte	0
 2034 0104 0F       		.uleb128 0xf
 2035 0105 2E       		.uleb128 0x2e
 2036 0106 01       		.byte	0x1
 2037 0107 3F       		.uleb128 0x3f
 2038 0108 19       		.uleb128 0x19
 2039 0109 03       		.uleb128 0x3
 2040 010a 0E       		.uleb128 0xe
 2041 010b 3A       		.uleb128 0x3a
 2042 010c 0B       		.uleb128 0xb
 2043 010d 3B       		.uleb128 0x3b
 2044 010e 05       		.uleb128 0x5
 2045 010f 27       		.uleb128 0x27
 2046 0110 19       		.uleb128 0x19
 2047 0111 11       		.uleb128 0x11
 2048 0112 01       		.uleb128 0x1
 2049 0113 12       		.uleb128 0x12
 2050 0114 06       		.uleb128 0x6
 2051 0115 40       		.uleb128 0x40
 2052 0116 18       		.uleb128 0x18
 2053 0117 9742     		.uleb128 0x2117
 2054 0119 19       		.uleb128 0x19
 2055 011a 01       		.uleb128 0x1
 2056 011b 13       		.uleb128 0x13
 2057 011c 00       		.byte	0
 2058 011d 00       		.byte	0
 2059 011e 10       		.uleb128 0x10
 2060 011f 2E       		.uleb128 0x2e
 2061 0120 01       		.byte	0x1
 2062 0121 3F       		.uleb128 0x3f
 2063 0122 19       		.uleb128 0x19
 2064 0123 03       		.uleb128 0x3
 2065 0124 0E       		.uleb128 0xe
 2066 0125 3A       		.uleb128 0x3a
 2067 0126 0B       		.uleb128 0xb
 2068 0127 3B       		.uleb128 0x3b
 2069 0128 05       		.uleb128 0x5
 2070 0129 27       		.uleb128 0x27
 2071 012a 19       		.uleb128 0x19
 2072 012b 11       		.uleb128 0x11
 2073 012c 01       		.uleb128 0x1
 2074 012d 12       		.uleb128 0x12
 2075 012e 06       		.uleb128 0x6
 2076 012f 40       		.uleb128 0x40
 2077 0130 18       		.uleb128 0x18
 2078 0131 9642     		.uleb128 0x2116
 2079 0133 19       		.uleb128 0x19
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 53


 2080 0134 01       		.uleb128 0x1
 2081 0135 13       		.uleb128 0x13
 2082 0136 00       		.byte	0
 2083 0137 00       		.byte	0
 2084 0138 11       		.uleb128 0x11
 2085 0139 01       		.uleb128 0x1
 2086 013a 01       		.byte	0x1
 2087 013b 49       		.uleb128 0x49
 2088 013c 13       		.uleb128 0x13
 2089 013d 01       		.uleb128 0x1
 2090 013e 13       		.uleb128 0x13
 2091 013f 00       		.byte	0
 2092 0140 00       		.byte	0
 2093 0141 12       		.uleb128 0x12
 2094 0142 21       		.uleb128 0x21
 2095 0143 00       		.byte	0
 2096 0144 49       		.uleb128 0x49
 2097 0145 13       		.uleb128 0x13
 2098 0146 2F       		.uleb128 0x2f
 2099 0147 0B       		.uleb128 0xb
 2100 0148 00       		.byte	0
 2101 0149 00       		.byte	0
 2102 014a 13       		.uleb128 0x13
 2103 014b 26       		.uleb128 0x26
 2104 014c 00       		.byte	0
 2105 014d 49       		.uleb128 0x49
 2106 014e 13       		.uleb128 0x13
 2107 014f 00       		.byte	0
 2108 0150 00       		.byte	0
 2109 0151 14       		.uleb128 0x14
 2110 0152 34       		.uleb128 0x34
 2111 0153 00       		.byte	0
 2112 0154 03       		.uleb128 0x3
 2113 0155 0E       		.uleb128 0xe
 2114 0156 3A       		.uleb128 0x3a
 2115 0157 0B       		.uleb128 0xb
 2116 0158 3B       		.uleb128 0x3b
 2117 0159 0B       		.uleb128 0xb
 2118 015a 49       		.uleb128 0x49
 2119 015b 13       		.uleb128 0x13
 2120 015c 3F       		.uleb128 0x3f
 2121 015d 19       		.uleb128 0x19
 2122 015e 02       		.uleb128 0x2
 2123 015f 18       		.uleb128 0x18
 2124 0160 00       		.byte	0
 2125 0161 00       		.byte	0
 2126 0162 00       		.byte	0
 2127              		.section	.debug_aranges,"",%progbits
 2128 0000 A4000000 		.4byte	0xa4
 2129 0004 0200     		.2byte	0x2
 2130 0006 00000000 		.4byte	.Ldebug_info0
 2131 000a 04       		.byte	0x4
 2132 000b 00       		.byte	0
 2133 000c 0000     		.2byte	0
 2134 000e 0000     		.2byte	0
 2135 0010 00000000 		.4byte	.LFB2
 2136 0014 24000000 		.4byte	.LFE2-.LFB2
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 54


 2137 0018 00000000 		.4byte	.LFB3
 2138 001c D8010000 		.4byte	.LFE3-.LFB3
 2139 0020 00000000 		.4byte	.LFB4
 2140 0024 38000000 		.4byte	.LFE4-.LFB4
 2141 0028 00000000 		.4byte	.LFB5
 2142 002c 18000000 		.4byte	.LFE5-.LFB5
 2143 0030 00000000 		.4byte	.LFB6
 2144 0034 14000000 		.4byte	.LFE6-.LFB6
 2145 0038 00000000 		.4byte	.LFB7
 2146 003c 08000000 		.4byte	.LFE7-.LFB7
 2147 0040 00000000 		.4byte	.LFB8
 2148 0044 48000000 		.4byte	.LFE8-.LFB8
 2149 0048 00000000 		.4byte	.LFB9
 2150 004c 44000000 		.4byte	.LFE9-.LFB9
 2151 0050 00000000 		.4byte	.LFB10
 2152 0054 1C000000 		.4byte	.LFE10-.LFB10
 2153 0058 00000000 		.4byte	.LFB11
 2154 005c 30000000 		.4byte	.LFE11-.LFB11
 2155 0060 00000000 		.4byte	.LFB12
 2156 0064 2C000000 		.4byte	.LFE12-.LFB12
 2157 0068 00000000 		.4byte	.LFB13
 2158 006c 1C000000 		.4byte	.LFE13-.LFB13
 2159 0070 00000000 		.4byte	.LFB14
 2160 0074 1C000000 		.4byte	.LFE14-.LFB14
 2161 0078 00000000 		.4byte	.LFB15
 2162 007c 30000000 		.4byte	.LFE15-.LFB15
 2163 0080 00000000 		.4byte	.LFB16
 2164 0084 2C000000 		.4byte	.LFE16-.LFB16
 2165 0088 00000000 		.4byte	.LFB17
 2166 008c A4000000 		.4byte	.LFE17-.LFB17
 2167 0090 00000000 		.4byte	.LFB18
 2168 0094 90000000 		.4byte	.LFE18-.LFB18
 2169 0098 00000000 		.4byte	.LFB19
 2170 009c 80000000 		.4byte	.LFE19-.LFB19
 2171 00a0 00000000 		.4byte	0
 2172 00a4 00000000 		.4byte	0
 2173              		.section	.debug_ranges,"",%progbits
 2174              	.Ldebug_ranges0:
 2175 0000 00000000 		.4byte	.LFB2
 2176 0004 24000000 		.4byte	.LFE2
 2177 0008 00000000 		.4byte	.LFB3
 2178 000c D8010000 		.4byte	.LFE3
 2179 0010 00000000 		.4byte	.LFB4
 2180 0014 38000000 		.4byte	.LFE4
 2181 0018 00000000 		.4byte	.LFB5
 2182 001c 18000000 		.4byte	.LFE5
 2183 0020 00000000 		.4byte	.LFB6
 2184 0024 14000000 		.4byte	.LFE6
 2185 0028 00000000 		.4byte	.LFB7
 2186 002c 08000000 		.4byte	.LFE7
 2187 0030 00000000 		.4byte	.LFB8
 2188 0034 48000000 		.4byte	.LFE8
 2189 0038 00000000 		.4byte	.LFB9
 2190 003c 44000000 		.4byte	.LFE9
 2191 0040 00000000 		.4byte	.LFB10
 2192 0044 1C000000 		.4byte	.LFE10
 2193 0048 00000000 		.4byte	.LFB11
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 55


 2194 004c 30000000 		.4byte	.LFE11
 2195 0050 00000000 		.4byte	.LFB12
 2196 0054 2C000000 		.4byte	.LFE12
 2197 0058 00000000 		.4byte	.LFB13
 2198 005c 1C000000 		.4byte	.LFE13
 2199 0060 00000000 		.4byte	.LFB14
 2200 0064 1C000000 		.4byte	.LFE14
 2201 0068 00000000 		.4byte	.LFB15
 2202 006c 30000000 		.4byte	.LFE15
 2203 0070 00000000 		.4byte	.LFB16
 2204 0074 2C000000 		.4byte	.LFE16
 2205 0078 00000000 		.4byte	.LFB17
 2206 007c A4000000 		.4byte	.LFE17
 2207 0080 00000000 		.4byte	.LFB18
 2208 0084 90000000 		.4byte	.LFE18
 2209 0088 00000000 		.4byte	.LFB19
 2210 008c 80000000 		.4byte	.LFE19
 2211 0090 00000000 		.4byte	0
 2212 0094 00000000 		.4byte	0
 2213              		.section	.debug_line,"",%progbits
 2214              	.Ldebug_line0:
 2215 0000 95020000 		.section	.debug_str,"MS",%progbits,1
 2215      02004000 
 2215      00000201 
 2215      FB0E0D00 
 2215      01010101 
 2216              	.LASF6:
 2217 0000 6C6F6E67 		.ascii	"long long int\000"
 2217      206C6F6E 
 2217      6720696E 
 2217      7400
 2218              	.LASF55:
 2219 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2219      6368616E 
 2219      6E656C73 
 2219      436F6E66 
 2219      696700
 2220              	.LASF19:
 2221 0021 72656733 		.ascii	"reg32\000"
 2221      3200
 2222              	.LASF59:
 2223 0027 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2223      4320342E 
 2223      392E3320 
 2223      32303135 
 2223      30333033 
 2224 005a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2224      20726576 
 2224      6973696F 
 2224      6E203232 
 2224      31323230 
 2225 008d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2225      66756E63 
 2225      74696F6E 
 2225      2D736563 
 2225      74696F6E 
 2226              	.LASF45:
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 56


 2227 00b5 6F666673 		.ascii	"offset\000"
 2227      657400
 2228              	.LASF15:
 2229 00bc 666C6F61 		.ascii	"float\000"
 2229      7400
 2230              	.LASF41:
 2231 00c2 68696768 		.ascii	"highLimit\000"
 2231      4C696D69 
 2231      7400
 2232              	.LASF48:
 2233 00cc 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2233      436F756E 
 2233      7473546F 
 2233      5F6D566F 
 2233      6C747300 
 2234              	.LASF52:
 2235 00e0 75566F6C 		.ascii	"uVolts\000"
 2235      747300
 2236              	.LASF3:
 2237 00e7 73686F72 		.ascii	"short unsigned int\000"
 2237      7420756E 
 2237      7369676E 
 2237      65642069 
 2237      6E7400
 2238              	.LASF61:
 2239 00fa 433A5C55 		.ascii	"C:\\Users\\akita\\Documents\\TPT02\\src\\TPT02r.cyd"
 2239      73657273 
 2239      5C616B69 
 2239      74615C44 
 2239      6F63756D 
 2240 0127 736E00   		.ascii	"sn\000"
 2241              	.LASF2:
 2242 012a 73686F72 		.ascii	"short int\000"
 2242      7420696E 
 2242      7400
 2243              	.LASF44:
 2244 0134 4144435F 		.ascii	"ADC_SetOffset\000"
 2244      5365744F 
 2244      66667365 
 2244      7400
 2245              	.LASF38:
 2246 0142 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2246      5365744C 
 2246      6F774C69 
 2246      6D697400 
 2247              	.LASF29:
 2248 0152 73746174 		.ascii	"status\000"
 2248      757300
 2249              	.LASF14:
 2250 0159 666C6F61 		.ascii	"float32\000"
 2250      74333200 
 2251              	.LASF57:
 2252 0161 4144435F 		.ascii	"ADC_offset\000"
 2252      6F666673 
 2252      657400
 2253              	.LASF22:
 2254 016c 746D7052 		.ascii	"tmpRegVal\000"
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 57


 2254      65675661 
 2254      6C00
 2255              	.LASF46:
 2256 0176 4144435F 		.ascii	"ADC_SetGain\000"
 2256      53657447 
 2256      61696E00 
 2257              	.LASF1:
 2258 0182 756E7369 		.ascii	"unsigned char\000"
 2258      676E6564 
 2258      20636861 
 2258      7200
 2259              	.LASF40:
 2260 0190 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2260      53657448 
 2260      6967684C 
 2260      696D6974 
 2260      00
 2261              	.LASF12:
 2262 01a1 696E7431 		.ascii	"int16\000"
 2262      3600
 2263              	.LASF5:
 2264 01a7 6C6F6E67 		.ascii	"long unsigned int\000"
 2264      20756E73 
 2264      69676E65 
 2264      6420696E 
 2264      7400
 2265              	.LASF13:
 2266 01b9 696E7433 		.ascii	"int32\000"
 2266      3200
 2267              	.LASF31:
 2268 01bf 4144435F 		.ascii	"ADC_GetResult16\000"
 2268      47657452 
 2268      6573756C 
 2268      74313600 
 2269              	.LASF36:
 2270 01cf 4144435F 		.ascii	"ADC_SetChanMask\000"
 2270      53657443 
 2270      68616E4D 
 2270      61736B00 
 2271              	.LASF43:
 2272 01df 4144435F 		.ascii	"ADC_SetSatMask\000"
 2272      53657453 
 2272      61744D61 
 2272      736B00
 2273              	.LASF30:
 2274 01ee 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2274      4973456E 
 2274      64436F6E 
 2274      76657273 
 2274      696F6E00 
 2275              	.LASF16:
 2276 0202 646F7562 		.ascii	"double\000"
 2276      6C6500
 2277              	.LASF39:
 2278 0209 6C6F774C 		.ascii	"lowLimit\000"
 2278      696D6974 
 2278      00
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 58


 2279              	.LASF47:
 2280 0212 61646347 		.ascii	"adcGain\000"
 2280      61696E00 
 2281              	.LASF10:
 2282 021a 75696E74 		.ascii	"uint16\000"
 2282      313600
 2283              	.LASF49:
 2284 0221 61646343 		.ascii	"adcCounts\000"
 2284      6F756E74 
 2284      7300
 2285              	.LASF11:
 2286 022b 75696E74 		.ascii	"uint32\000"
 2286      333200
 2287              	.LASF42:
 2288 0232 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2288      5365744C 
 2288      696D6974 
 2288      4D61736B 
 2288      00
 2289              	.LASF8:
 2290 0243 756E7369 		.ascii	"unsigned int\000"
 2290      676E6564 
 2290      20696E74 
 2290      00
 2291              	.LASF25:
 2292 0250 4144435F 		.ascii	"ADC_Enable\000"
 2292      456E6162 
 2292      6C6500
 2293              	.LASF23:
 2294 025b 636F756E 		.ascii	"counts\000"
 2294      747300
 2295              	.LASF7:
 2296 0262 6C6F6E67 		.ascii	"long long unsigned int\000"
 2296      206C6F6E 
 2296      6720756E 
 2296      7369676E 
 2296      65642069 
 2297              	.LASF34:
 2298 0279 72657375 		.ascii	"result\000"
 2298      6C7400
 2299              	.LASF24:
 2300 0280 4144435F 		.ascii	"ADC_Start\000"
 2300      53746172 
 2300      7400
 2301              	.LASF35:
 2302 028a 4144435F 		.ascii	"ADC_Init\000"
 2302      496E6974 
 2302      00
 2303              	.LASF54:
 2304 0293 766F6C74 		.ascii	"volts\000"
 2304      7300
 2305              	.LASF33:
 2306 0299 6368616E 		.ascii	"chan\000"
 2306      00
 2307              	.LASF50:
 2308 029e 6D566F6C 		.ascii	"mVolts\000"
 2308      747300
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 59


 2309              	.LASF20:
 2310 02a5 73697A65 		.ascii	"sizetype\000"
 2310      74797065 
 2310      00
 2311              	.LASF51:
 2312 02ae 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2312      436F756E 
 2312      7473546F 
 2312      5F75566F 
 2312      6C747300 
 2313              	.LASF53:
 2314 02c2 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2314      436F756E 
 2314      7473546F 
 2314      5F566F6C 
 2314      747300
 2315              	.LASF27:
 2316 02d5 4144435F 		.ascii	"ADC_StartConvert\000"
 2316      53746172 
 2316      74436F6E 
 2316      76657274 
 2316      00
 2317              	.LASF60:
 2318 02e6 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2318      72617465 
 2318      645F536F 
 2318      75726365 
 2318      5C50536F 
 2319              	.LASF37:
 2320 0303 6D61736B 		.ascii	"mask\000"
 2320      00
 2321              	.LASF21:
 2322 0308 63684E75 		.ascii	"chNum\000"
 2322      6D00
 2323              	.LASF32:
 2324 030e 7265744D 		.ascii	"retMode\000"
 2324      6F646500 
 2325              	.LASF28:
 2326 0316 4144435F 		.ascii	"ADC_StopConvert\000"
 2326      53746F70 
 2326      436F6E76 
 2326      65727400 
 2327              	.LASF9:
 2328 0326 75696E74 		.ascii	"uint8\000"
 2328      3800
 2329              	.LASF58:
 2330 032c 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2330      636F756E 
 2330      74735065 
 2330      72313056 
 2330      6F6C7400 
 2331              	.LASF4:
 2332 0340 6C6F6E67 		.ascii	"long int\000"
 2332      20696E74 
 2332      00
 2333              	.LASF18:
 2334 0349 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\akita\AppData\Local\Temp\ccrMqZP3.s 			page 60


 2334      00
 2335              	.LASF0:
 2336 034e 7369676E 		.ascii	"signed char\000"
 2336      65642063 
 2336      68617200 
 2337              	.LASF56:
 2338 035a 4144435F 		.ascii	"ADC_initVar\000"
 2338      696E6974 
 2338      56617200 
 2339              	.LASF17:
 2340 0366 696E7436 		.ascii	"int64\000"
 2340      3400
 2341              	.LASF26:
 2342 036c 4144435F 		.ascii	"ADC_Stop\000"
 2342      53746F70 
 2342      00
 2343              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
